
unit7_Lesson4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c64  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08000d94  08000d94  00010d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000db8  08000db8  00010dc0  2**0
                  CONTENTS
  4 .ARM          00000000  08000db8  08000db8  00010dc0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000db8  08000dc0  00010dc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000db8  08000db8  00010db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dbc  08000dbc  00010dbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dc0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000000  08000dc0  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000060  08000dc0  00020060  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dc0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003362  00000000  00000000  00010de9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000007cc  00000000  00000000  0001414b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000970  00000000  00000000  00014917  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001a0  00000000  00000000  00015288  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000158  00000000  00000000  00015428  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000232b  00000000  00000000  00015580  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00001b20  00000000  00000000  000178ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000092a1  00000000  00000000  000193cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002266c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000514  00000000  00000000  000226e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d7c 	.word	0x08000d7c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d7c 	.word	0x08000d7c

08000170 <clock_init>:
#include"stm32_f103c6_EXTI_driver.h"
#include "lcd.h"


uint8_t IRQ_Flag = 0;
void clock_init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();  /* to enable clock for GPIOA */
 8000174:	4b0a      	ldr	r3, [pc, #40]	; (80001a0 <clock_init+0x30>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a09      	ldr	r2, [pc, #36]	; (80001a0 <clock_init+0x30>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();  /* to enable clock for GPIOB */
 8000180:	4b07      	ldr	r3, [pc, #28]	; (80001a0 <clock_init+0x30>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a06      	ldr	r2, [pc, #24]	; (80001a0 <clock_init+0x30>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();   /* to enable clock for AFIO  */
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <clock_init+0x30>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a03      	ldr	r2, [pc, #12]	; (80001a0 <clock_init+0x30>)
 8000192:	f043 0301 	orr.w	r3, r3, #1
 8000196:	6193      	str	r3, [r2, #24]
}
 8000198:	bf00      	nop
 800019a:	46bd      	mov	sp, r7
 800019c:	bc80      	pop	{r7}
 800019e:	4770      	bx	lr
 80001a0:	40021000 	.word	0x40021000

080001a4 <EXTI9_Callback>:

void EXTI9_Callback(void)
{
 80001a4:	b580      	push	{r7, lr}
 80001a6:	af00      	add	r7, sp, #0
	IRQ_Flag = 1;
 80001a8:	4b05      	ldr	r3, [pc, #20]	; (80001c0 <EXTI9_Callback+0x1c>)
 80001aa:	2201      	movs	r2, #1
 80001ac:	701a      	strb	r2, [r3, #0]
	LCD_WRITE_STRING("IRQ EXTI9 is Happened");
 80001ae:	4805      	ldr	r0, [pc, #20]	; (80001c4 <EXTI9_Callback+0x20>)
 80001b0:	f000 f9c8 	bl	8000544 <LCD_WRITE_STRING>
	delay_ms(1000);
 80001b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80001b8:	f000 f85b 	bl	8000272 <delay_ms>
}
 80001bc:	bf00      	nop
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08000d94 	.word	0x08000d94

080001c8 <main>:


int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b086      	sub	sp, #24
 80001cc:	af00      	add	r7, sp, #0
	clock_init();
 80001ce:	f7ff ffcf 	bl	8000170 <clock_init>

	LCD_INIT();
 80001d2:	f000 f959 	bl	8000488 <LCD_INIT>
	LCD_clear_screen();
 80001d6:	f000 f915 	bl	8000404 <LCD_clear_screen>

	EXTI_PinConfig_t EXTI_CFG;
	EXTI_CFG.EXTI_PIN = EXTI9PB9;
 80001da:	4a0e      	ldr	r2, [pc, #56]	; (8000214 <main+0x4c>)
 80001dc:	1d3b      	adds	r3, r7, #4
 80001de:	ca07      	ldmia	r2, {r0, r1, r2}
 80001e0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Trigger_Case = EXTI_Trigger_RISING;
 80001e4:	2300      	movs	r3, #0
 80001e6:	743b      	strb	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_Callback;
 80001e8:	4b0b      	ldr	r3, [pc, #44]	; (8000218 <main+0x50>)
 80001ea:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN= EXTI_IRQ_Enable;
 80001ec:	2301      	movs	r3, #1
 80001ee:	747b      	strb	r3, [r7, #17]

	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	4618      	mov	r0, r3
 80001f4:	f000 fb8a 	bl	800090c <MCAL_EXTI_GPIO_Init>

	IRQ_Flag = 1;
 80001f8:	4b08      	ldr	r3, [pc, #32]	; (800021c <main+0x54>)
 80001fa:	2201      	movs	r2, #1
 80001fc:	701a      	strb	r2, [r3, #0]

	/* Loop forever */
	for(;;)
	{
		if(IRQ_Flag)
 80001fe:	4b07      	ldr	r3, [pc, #28]	; (800021c <main+0x54>)
 8000200:	781b      	ldrb	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0fb      	beq.n	80001fe <main+0x36>
		{
			LCD_clear_screen();
 8000206:	f000 f8fd 	bl	8000404 <LCD_clear_screen>
			IRQ_Flag=0;
 800020a:	4b04      	ldr	r3, [pc, #16]	; (800021c <main+0x54>)
 800020c:	2200      	movs	r2, #0
 800020e:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 8000210:	e7f5      	b.n	80001fe <main+0x36>
 8000212:	bf00      	nop
 8000214:	08000dac 	.word	0x08000dac
 8000218:	080001a5 	.word	0x080001a5
 800021c:	2000001c 	.word	0x2000001c

08000220 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000220:	480d      	ldr	r0, [pc, #52]	; (8000258 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000222:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000224:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000228:	480c      	ldr	r0, [pc, #48]	; (800025c <LoopForever+0x6>)
  ldr r1, =_edata
 800022a:	490d      	ldr	r1, [pc, #52]	; (8000260 <LoopForever+0xa>)
  ldr r2, =_sidata
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <LoopForever+0xe>)
  movs r3, #0
 800022e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000230:	e002      	b.n	8000238 <LoopCopyDataInit>

08000232 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000232:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000234:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000236:	3304      	adds	r3, #4

08000238 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000238:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800023a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800023c:	d3f9      	bcc.n	8000232 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800023e:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000240:	4c0a      	ldr	r4, [pc, #40]	; (800026c <LoopForever+0x16>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000244:	e001      	b.n	800024a <LoopFillZerobss>

08000246 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000246:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000248:	3204      	adds	r2, #4

0800024a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800024a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800024c:	d3fb      	bcc.n	8000246 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800024e:	f000 fd71 	bl	8000d34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000252:	f7ff ffb9 	bl	80001c8 <main>

08000256 <LoopForever>:

LoopForever:
    b LoopForever
 8000256:	e7fe      	b.n	8000256 <LoopForever>
  ldr   r0, =_estack
 8000258:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 800025c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000260:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000264:	08000dc0 	.word	0x08000dc0
  ldr r2, =_sbss
 8000268:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800026c:	20000060 	.word	0x20000060

08000270 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000270:	e7fe      	b.n	8000270 <ADC1_2_IRQHandler>

08000272 <delay_ms>:
 *  Author: Marco
 */

#include "lcd.h"

void delay_ms(uint32_t time) {
 8000272:	b480      	push	{r7}
 8000274:	b085      	sub	sp, #20
 8000276:	af00      	add	r7, sp, #0
 8000278:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 800027a:	2300      	movs	r3, #0
 800027c:	60fb      	str	r3, [r7, #12]
 800027e:	e00b      	b.n	8000298 <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 8000280:	2300      	movs	r3, #0
 8000282:	60bb      	str	r3, [r7, #8]
 8000284:	e002      	b.n	800028c <delay_ms+0x1a>
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	3301      	adds	r3, #1
 800028a:	60bb      	str	r3, [r7, #8]
 800028c:	68bb      	ldr	r3, [r7, #8]
 800028e:	2bfe      	cmp	r3, #254	; 0xfe
 8000290:	d9f9      	bls.n	8000286 <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000292:	68fb      	ldr	r3, [r7, #12]
 8000294:	3301      	adds	r3, #1
 8000296:	60fb      	str	r3, [r7, #12]
 8000298:	68fa      	ldr	r2, [r7, #12]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	429a      	cmp	r2, r3
 800029e:	d3ef      	bcc.n	8000280 <delay_ms+0xe>
			;
}
 80002a0:	bf00      	nop
 80002a2:	3714      	adds	r7, #20
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bc80      	pop	{r7}
 80002a8:	4770      	bx	lr
	...

080002ac <LCD_GPIO_init>:

void LCD_GPIO_init() {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0

	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80002b0:	4b52      	ldr	r3, [pc, #328]	; (80003fc <LCD_GPIO_init+0x150>)
 80002b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002b6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002b8:	4b50      	ldr	r3, [pc, #320]	; (80003fc <LCD_GPIO_init+0x150>)
 80002ba:	2204      	movs	r2, #4
 80002bc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002be:	4b4f      	ldr	r3, [pc, #316]	; (80003fc <LCD_GPIO_init+0x150>)
 80002c0:	2201      	movs	r2, #1
 80002c2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002c4:	494d      	ldr	r1, [pc, #308]	; (80003fc <LCD_GPIO_init+0x150>)
 80002c6:	484e      	ldr	r0, [pc, #312]	; (8000400 <LCD_GPIO_init+0x154>)
 80002c8:	f000 fc8f 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80002cc:	4b4b      	ldr	r3, [pc, #300]	; (80003fc <LCD_GPIO_init+0x150>)
 80002ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80002d2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002d4:	4b49      	ldr	r3, [pc, #292]	; (80003fc <LCD_GPIO_init+0x150>)
 80002d6:	2204      	movs	r2, #4
 80002d8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002da:	4b48      	ldr	r3, [pc, #288]	; (80003fc <LCD_GPIO_init+0x150>)
 80002dc:	2201      	movs	r2, #1
 80002de:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002e0:	4946      	ldr	r1, [pc, #280]	; (80003fc <LCD_GPIO_init+0x150>)
 80002e2:	4847      	ldr	r0, [pc, #284]	; (8000400 <LCD_GPIO_init+0x154>)
 80002e4:	f000 fc81 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 80002e8:	4b44      	ldr	r3, [pc, #272]	; (80003fc <LCD_GPIO_init+0x150>)
 80002ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80002ee:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80002f0:	4b42      	ldr	r3, [pc, #264]	; (80003fc <LCD_GPIO_init+0x150>)
 80002f2:	2204      	movs	r2, #4
 80002f4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80002f6:	4b41      	ldr	r3, [pc, #260]	; (80003fc <LCD_GPIO_init+0x150>)
 80002f8:	2201      	movs	r2, #1
 80002fa:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80002fc:	493f      	ldr	r1, [pc, #252]	; (80003fc <LCD_GPIO_init+0x150>)
 80002fe:	4840      	ldr	r0, [pc, #256]	; (8000400 <LCD_GPIO_init+0x154>)
 8000300:	f000 fc73 	bl	8000bea <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000304:	4b3d      	ldr	r3, [pc, #244]	; (80003fc <LCD_GPIO_init+0x150>)
 8000306:	2201      	movs	r2, #1
 8000308:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800030a:	4b3c      	ldr	r3, [pc, #240]	; (80003fc <LCD_GPIO_init+0x150>)
 800030c:	2204      	movs	r2, #4
 800030e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000310:	4b3a      	ldr	r3, [pc, #232]	; (80003fc <LCD_GPIO_init+0x150>)
 8000312:	2201      	movs	r2, #1
 8000314:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000316:	4939      	ldr	r1, [pc, #228]	; (80003fc <LCD_GPIO_init+0x150>)
 8000318:	4839      	ldr	r0, [pc, #228]	; (8000400 <LCD_GPIO_init+0x154>)
 800031a:	f000 fc66 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800031e:	4b37      	ldr	r3, [pc, #220]	; (80003fc <LCD_GPIO_init+0x150>)
 8000320:	2202      	movs	r2, #2
 8000322:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000324:	4b35      	ldr	r3, [pc, #212]	; (80003fc <LCD_GPIO_init+0x150>)
 8000326:	2204      	movs	r2, #4
 8000328:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800032a:	4b34      	ldr	r3, [pc, #208]	; (80003fc <LCD_GPIO_init+0x150>)
 800032c:	2201      	movs	r2, #1
 800032e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000330:	4932      	ldr	r1, [pc, #200]	; (80003fc <LCD_GPIO_init+0x150>)
 8000332:	4833      	ldr	r0, [pc, #204]	; (8000400 <LCD_GPIO_init+0x154>)
 8000334:	f000 fc59 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000338:	4b30      	ldr	r3, [pc, #192]	; (80003fc <LCD_GPIO_init+0x150>)
 800033a:	2204      	movs	r2, #4
 800033c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800033e:	4b2f      	ldr	r3, [pc, #188]	; (80003fc <LCD_GPIO_init+0x150>)
 8000340:	2204      	movs	r2, #4
 8000342:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000344:	4b2d      	ldr	r3, [pc, #180]	; (80003fc <LCD_GPIO_init+0x150>)
 8000346:	2201      	movs	r2, #1
 8000348:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800034a:	492c      	ldr	r1, [pc, #176]	; (80003fc <LCD_GPIO_init+0x150>)
 800034c:	482c      	ldr	r0, [pc, #176]	; (8000400 <LCD_GPIO_init+0x154>)
 800034e:	f000 fc4c 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000352:	4b2a      	ldr	r3, [pc, #168]	; (80003fc <LCD_GPIO_init+0x150>)
 8000354:	2208      	movs	r2, #8
 8000356:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000358:	4b28      	ldr	r3, [pc, #160]	; (80003fc <LCD_GPIO_init+0x150>)
 800035a:	2204      	movs	r2, #4
 800035c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800035e:	4b27      	ldr	r3, [pc, #156]	; (80003fc <LCD_GPIO_init+0x150>)
 8000360:	2201      	movs	r2, #1
 8000362:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000364:	4925      	ldr	r1, [pc, #148]	; (80003fc <LCD_GPIO_init+0x150>)
 8000366:	4826      	ldr	r0, [pc, #152]	; (8000400 <LCD_GPIO_init+0x154>)
 8000368:	f000 fc3f 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 800036c:	4b23      	ldr	r3, [pc, #140]	; (80003fc <LCD_GPIO_init+0x150>)
 800036e:	2210      	movs	r2, #16
 8000370:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000372:	4b22      	ldr	r3, [pc, #136]	; (80003fc <LCD_GPIO_init+0x150>)
 8000374:	2204      	movs	r2, #4
 8000376:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000378:	4b20      	ldr	r3, [pc, #128]	; (80003fc <LCD_GPIO_init+0x150>)
 800037a:	2201      	movs	r2, #1
 800037c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800037e:	491f      	ldr	r1, [pc, #124]	; (80003fc <LCD_GPIO_init+0x150>)
 8000380:	481f      	ldr	r0, [pc, #124]	; (8000400 <LCD_GPIO_init+0x154>)
 8000382:	f000 fc32 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000386:	4b1d      	ldr	r3, [pc, #116]	; (80003fc <LCD_GPIO_init+0x150>)
 8000388:	2220      	movs	r2, #32
 800038a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800038c:	4b1b      	ldr	r3, [pc, #108]	; (80003fc <LCD_GPIO_init+0x150>)
 800038e:	2204      	movs	r2, #4
 8000390:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <LCD_GPIO_init+0x150>)
 8000394:	2201      	movs	r2, #1
 8000396:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000398:	4918      	ldr	r1, [pc, #96]	; (80003fc <LCD_GPIO_init+0x150>)
 800039a:	4819      	ldr	r0, [pc, #100]	; (8000400 <LCD_GPIO_init+0x154>)
 800039c:	f000 fc25 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80003a0:	4b16      	ldr	r3, [pc, #88]	; (80003fc <LCD_GPIO_init+0x150>)
 80003a2:	2240      	movs	r2, #64	; 0x40
 80003a4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003a6:	4b15      	ldr	r3, [pc, #84]	; (80003fc <LCD_GPIO_init+0x150>)
 80003a8:	2204      	movs	r2, #4
 80003aa:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003ac:	4b13      	ldr	r3, [pc, #76]	; (80003fc <LCD_GPIO_init+0x150>)
 80003ae:	2201      	movs	r2, #1
 80003b0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80003b2:	4912      	ldr	r1, [pc, #72]	; (80003fc <LCD_GPIO_init+0x150>)
 80003b4:	4812      	ldr	r0, [pc, #72]	; (8000400 <LCD_GPIO_init+0x154>)
 80003b6:	f000 fc18 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80003ba:	4b10      	ldr	r3, [pc, #64]	; (80003fc <LCD_GPIO_init+0x150>)
 80003bc:	2280      	movs	r2, #128	; 0x80
 80003be:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003c0:	4b0e      	ldr	r3, [pc, #56]	; (80003fc <LCD_GPIO_init+0x150>)
 80003c2:	2204      	movs	r2, #4
 80003c4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003c6:	4b0d      	ldr	r3, [pc, #52]	; (80003fc <LCD_GPIO_init+0x150>)
 80003c8:	2201      	movs	r2, #1
 80003ca:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80003cc:	490b      	ldr	r1, [pc, #44]	; (80003fc <LCD_GPIO_init+0x150>)
 80003ce:	480c      	ldr	r0, [pc, #48]	; (8000400 <LCD_GPIO_init+0x154>)
 80003d0:	f000 fc0b 	bl	8000bea <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80003d4:	2200      	movs	r2, #0
 80003d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003da:	4809      	ldr	r0, [pc, #36]	; (8000400 <LCD_GPIO_init+0x154>)
 80003dc:	f000 fc84 	bl	8000ce8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003e6:	4806      	ldr	r0, [pc, #24]	; (8000400 <LCD_GPIO_init+0x154>)
 80003e8:	f000 fc7e 	bl	8000ce8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80003ec:	2200      	movs	r2, #0
 80003ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f2:	4803      	ldr	r0, [pc, #12]	; (8000400 <LCD_GPIO_init+0x154>)
 80003f4:	f000 fc78 	bl	8000ce8 <MCAL_GPIO_WritePin>

}
 80003f8:	bf00      	nop
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000020 	.word	0x20000020
 8000400:	40010800 	.word	0x40010800

08000404 <LCD_clear_screen>:

void LCD_clear_screen() {
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 8000408:	2001      	movs	r0, #1
 800040a:	f000 f857 	bl	80004bc <LCD_WRITE_COMMAND>
}
 800040e:	bf00      	nop
 8000410:	bd80      	pop	{r7, pc}
	...

08000414 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 8000414:	b580      	push	{r7, lr}
 8000416:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 8000418:	2201      	movs	r2, #1
 800041a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800041e:	4807      	ldr	r0, [pc, #28]	; (800043c <LCD_lcd_kick+0x28>)
 8000420:	f000 fc62 	bl	8000ce8 <MCAL_GPIO_WritePin>
	delay_ms(50);
 8000424:	2032      	movs	r0, #50	; 0x32
 8000426:	f7ff ff24 	bl	8000272 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800042a:	2200      	movs	r2, #0
 800042c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000430:	4802      	ldr	r0, [pc, #8]	; (800043c <LCD_lcd_kick+0x28>)
 8000432:	f000 fc59 	bl	8000ce8 <MCAL_GPIO_WritePin>
}
 8000436:	bf00      	nop
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40010800 	.word	0x40010800

08000440 <LCD_GOTO_XY>:

void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 8000440:	b580      	push	{r7, lr}
 8000442:	b082      	sub	sp, #8
 8000444:	af00      	add	r7, sp, #0
 8000446:	4603      	mov	r3, r0
 8000448:	460a      	mov	r2, r1
 800044a:	71fb      	strb	r3, [r7, #7]
 800044c:	4613      	mov	r3, r2
 800044e:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 8000450:	79fb      	ldrb	r3, [r7, #7]
 8000452:	2b01      	cmp	r3, #1
 8000454:	d108      	bne.n	8000468 <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 8000456:	79bb      	ldrb	r3, [r7, #6]
 8000458:	2b0f      	cmp	r3, #15
 800045a:	d805      	bhi.n	8000468 <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 800045c:	79bb      	ldrb	r3, [r7, #6]
 800045e:	3b80      	subs	r3, #128	; 0x80
 8000460:	b2db      	uxtb	r3, r3
 8000462:	4618      	mov	r0, r3
 8000464:	f000 f82a 	bl	80004bc <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 8000468:	79fb      	ldrb	r3, [r7, #7]
 800046a:	2b02      	cmp	r3, #2
 800046c:	d108      	bne.n	8000480 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 800046e:	79bb      	ldrb	r3, [r7, #6]
 8000470:	2b0f      	cmp	r3, #15
 8000472:	d805      	bhi.n	8000480 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000474:	79bb      	ldrb	r3, [r7, #6]
 8000476:	3b40      	subs	r3, #64	; 0x40
 8000478:	b2db      	uxtb	r3, r3
 800047a:	4618      	mov	r0, r3
 800047c:	f000 f81e 	bl	80004bc <LCD_WRITE_COMMAND>
		}
	}
}
 8000480:	bf00      	nop
 8000482:	3708      	adds	r7, #8
 8000484:	46bd      	mov	sp, r7
 8000486:	bd80      	pop	{r7, pc}

08000488 <LCD_INIT>:

void LCD_INIT() {
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0

	delay_ms(20);
 800048c:	2014      	movs	r0, #20
 800048e:	f7ff fef0 	bl	8000272 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 8000492:	f7ff ff0b 	bl	80002ac <LCD_GPIO_init>
	//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 8000496:	200f      	movs	r0, #15
 8000498:	f7ff feeb 	bl	8000272 <delay_ms>

	LCD_clear_screen();
 800049c:	f7ff ffb2 	bl	8000404 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80004a0:	2038      	movs	r0, #56	; 0x38
 80004a2:	f000 f80b 	bl	80004bc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80004a6:	2006      	movs	r0, #6
 80004a8:	f000 f808 	bl	80004bc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80004ac:	2080      	movs	r0, #128	; 0x80
 80004ae:	f000 f805 	bl	80004bc <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80004b2:	200f      	movs	r0, #15
 80004b4:	f000 f802 	bl	80004bc <LCD_WRITE_COMMAND>
}
 80004b8:	bf00      	nop
 80004ba:	bd80      	pop	{r7, pc}

080004bc <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
	//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 80004bc:	b580      	push	{r7, lr}
 80004be:	b082      	sub	sp, #8
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]
	//LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_PORT, command);
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	4619      	mov	r1, r3
 80004ca:	480c      	ldr	r0, [pc, #48]	; (80004fc <LCD_WRITE_COMMAND+0x40>)
 80004cc:	f000 fc23 	bl	8000d16 <MCAL_GPIO_WritePort>
	//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
	//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
	//	LCD_CTRL->CRL = command;
	//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004d6:	4809      	ldr	r0, [pc, #36]	; (80004fc <LCD_WRITE_COMMAND+0x40>)
 80004d8:	f000 fc06 	bl	8000ce8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80004dc:	2200      	movs	r2, #0
 80004de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004e2:	4806      	ldr	r0, [pc, #24]	; (80004fc <LCD_WRITE_COMMAND+0x40>)
 80004e4:	f000 fc00 	bl	8000ce8 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 80004e8:	2001      	movs	r0, #1
 80004ea:	f7ff fec2 	bl	8000272 <delay_ms>
	LCD_lcd_kick();
 80004ee:	f7ff ff91 	bl	8000414 <LCD_lcd_kick>

}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	40010800 	.word	0x40010800

08000500 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char character) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
	//	LCD_check_lcd_isbusy();
	//	LCD_CTRL->CRL = character;
	//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePort(LCD_PORT, character);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	4619      	mov	r1, r3
 800050e:	480c      	ldr	r0, [pc, #48]	; (8000540 <LCD_WRITE_CHAR+0x40>)
 8000510:	f000 fc01 	bl	8000d16 <MCAL_GPIO_WritePort>
	//	LCD_CTRL ^= (LCD_CTRL ^ character) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	f44f 7100 	mov.w	r1, #512	; 0x200
 800051a:	4809      	ldr	r0, [pc, #36]	; (8000540 <LCD_WRITE_CHAR+0x40>)
 800051c:	f000 fbe4 	bl	8000ce8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_SET);
 8000520:	2201      	movs	r2, #1
 8000522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000526:	4806      	ldr	r0, [pc, #24]	; (8000540 <LCD_WRITE_CHAR+0x40>)
 8000528:	f000 fbde 	bl	8000ce8 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~(1 << RW_SWITCH);
	//	LCD_CTRL |= (1 << RS_SWITCH);
	delay_ms(1);
 800052c:	2001      	movs	r0, #1
 800052e:	f7ff fea0 	bl	8000272 <delay_ms>
	LCD_lcd_kick();
 8000532:	f7ff ff6f 	bl	8000414 <LCD_lcd_kick>
}
 8000536:	bf00      	nop
 8000538:	3708      	adds	r7, #8
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40010800 	.word	0x40010800

08000544 <LCD_WRITE_STRING>:

void LCD_WRITE_STRING(char *string) {
 8000544:	b580      	push	{r7, lr}
 8000546:	b084      	sub	sp, #16
 8000548:	af00      	add	r7, sp, #0
 800054a:	6078      	str	r0, [r7, #4]
	int count = 0;
 800054c:	2300      	movs	r3, #0
 800054e:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 8000550:	e01c      	b.n	800058c <LCD_WRITE_STRING+0x48>
		count++;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	3301      	adds	r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
		LCD_WRITE_CHAR(*string++);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	1c5a      	adds	r2, r3, #1
 800055c:	607a      	str	r2, [r7, #4]
 800055e:	781b      	ldrb	r3, [r3, #0]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff ffcd 	bl	8000500 <LCD_WRITE_CHAR>
		if (count == 16) {
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	2b10      	cmp	r3, #16
 800056a:	d104      	bne.n	8000576 <LCD_WRITE_STRING+0x32>
			LCD_GOTO_XY(2, 0);
 800056c:	2100      	movs	r1, #0
 800056e:	2002      	movs	r0, #2
 8000570:	f7ff ff66 	bl	8000440 <LCD_GOTO_XY>
 8000574:	e00a      	b.n	800058c <LCD_WRITE_STRING+0x48>
		} else if (count == 32) {
 8000576:	68fb      	ldr	r3, [r7, #12]
 8000578:	2b20      	cmp	r3, #32
 800057a:	d107      	bne.n	800058c <LCD_WRITE_STRING+0x48>
			LCD_clear_screen();
 800057c:	f7ff ff42 	bl	8000404 <LCD_clear_screen>
			LCD_GOTO_XY(1, 0);
 8000580:	2100      	movs	r1, #0
 8000582:	2001      	movs	r0, #1
 8000584:	f7ff ff5c 	bl	8000440 <LCD_GOTO_XY>
			count = 0;
 8000588:	2300      	movs	r3, #0
 800058a:	60fb      	str	r3, [r7, #12]
	while (*string > 0) {
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d1de      	bne.n	8000552 <LCD_WRITE_STRING+0xe>
		}
	}
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <Enable_NVIC>:
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
//     Generic Functions
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

void Enable_NVIC(uint16_t IRQ)
{
 800059c:	b480      	push	{r7}
 800059e:	b083      	sub	sp, #12
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	4603      	mov	r3, r0
 80005a4:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 80005a6:	88fb      	ldrh	r3, [r7, #6]
 80005a8:	2b0f      	cmp	r3, #15
 80005aa:	d854      	bhi.n	8000656 <Enable_NVIC+0xba>
 80005ac:	a201      	add	r2, pc, #4	; (adr r2, 80005b4 <Enable_NVIC+0x18>)
 80005ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005b2:	bf00      	nop
 80005b4:	080005f5 	.word	0x080005f5
 80005b8:	08000603 	.word	0x08000603
 80005bc:	08000611 	.word	0x08000611
 80005c0:	0800061f 	.word	0x0800061f
 80005c4:	0800062d 	.word	0x0800062d
 80005c8:	0800063b 	.word	0x0800063b
 80005cc:	0800063b 	.word	0x0800063b
 80005d0:	0800063b 	.word	0x0800063b
 80005d4:	0800063b 	.word	0x0800063b
 80005d8:	0800063b 	.word	0x0800063b
 80005dc:	08000649 	.word	0x08000649
 80005e0:	08000649 	.word	0x08000649
 80005e4:	08000649 	.word	0x08000649
 80005e8:	08000649 	.word	0x08000649
 80005ec:	08000649 	.word	0x08000649
 80005f0:	08000649 	.word	0x08000649
	{
	case 0: NVIC_IRQ6_EXTI0_Enable     ; break;
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <Enable_NVIC+0xc4>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a19      	ldr	r2, [pc, #100]	; (8000660 <Enable_NVIC+0xc4>)
 80005fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005fe:	6013      	str	r3, [r2, #0]
 8000600:	e029      	b.n	8000656 <Enable_NVIC+0xba>
	case 1: NVIC_IRQ7_EXTI1_Enable     ; break;
 8000602:	4b17      	ldr	r3, [pc, #92]	; (8000660 <Enable_NVIC+0xc4>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	4a16      	ldr	r2, [pc, #88]	; (8000660 <Enable_NVIC+0xc4>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800060c:	6013      	str	r3, [r2, #0]
 800060e:	e022      	b.n	8000656 <Enable_NVIC+0xba>
	case 2: NVIC_IRQ8_EXTI2_Enable     ; break;
 8000610:	4b13      	ldr	r3, [pc, #76]	; (8000660 <Enable_NVIC+0xc4>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a12      	ldr	r2, [pc, #72]	; (8000660 <Enable_NVIC+0xc4>)
 8000616:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	e01b      	b.n	8000656 <Enable_NVIC+0xba>
	case 3: NVIC_IRQ9_EXTI3_Enable     ; break;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <Enable_NVIC+0xc4>)
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	4a0f      	ldr	r2, [pc, #60]	; (8000660 <Enable_NVIC+0xc4>)
 8000624:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000628:	6013      	str	r3, [r2, #0]
 800062a:	e014      	b.n	8000656 <Enable_NVIC+0xba>
	case 4: NVIC_IRQ10_EXTI4_Enable    ; break;
 800062c:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <Enable_NVIC+0xc4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a0b      	ldr	r2, [pc, #44]	; (8000660 <Enable_NVIC+0xc4>)
 8000632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000636:	6013      	str	r3, [r2, #0]
 8000638:	e00d      	b.n	8000656 <Enable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Enable; break;
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <Enable_NVIC+0xc4>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <Enable_NVIC+0xc4>)
 8000640:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000644:	6013      	str	r3, [r2, #0]
 8000646:	e006      	b.n	8000656 <Enable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Enable; break;
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <Enable_NVIC+0xc8>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a05      	ldr	r2, [pc, #20]	; (8000664 <Enable_NVIC+0xc8>)
 800064e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000652:	6013      	str	r3, [r2, #0]
 8000654:	bf00      	nop
	}
}
 8000656:	bf00      	nop
 8000658:	370c      	adds	r7, #12
 800065a:	46bd      	mov	sp, r7
 800065c:	bc80      	pop	{r7}
 800065e:	4770      	bx	lr
 8000660:	e000e100 	.word	0xe000e100
 8000664:	e000e104 	.word	0xe000e104

08000668 <Disable_NVIC>:

void Disable_NVIC(uint16_t IRQ)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	80fb      	strh	r3, [r7, #6]
	switch(IRQ)
 8000672:	88fb      	ldrh	r3, [r7, #6]
 8000674:	2b0f      	cmp	r3, #15
 8000676:	d854      	bhi.n	8000722 <Disable_NVIC+0xba>
 8000678:	a201      	add	r2, pc, #4	; (adr r2, 8000680 <Disable_NVIC+0x18>)
 800067a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800067e:	bf00      	nop
 8000680:	080006c1 	.word	0x080006c1
 8000684:	080006cf 	.word	0x080006cf
 8000688:	080006dd 	.word	0x080006dd
 800068c:	080006eb 	.word	0x080006eb
 8000690:	080006f9 	.word	0x080006f9
 8000694:	08000707 	.word	0x08000707
 8000698:	08000707 	.word	0x08000707
 800069c:	08000707 	.word	0x08000707
 80006a0:	08000707 	.word	0x08000707
 80006a4:	08000707 	.word	0x08000707
 80006a8:	08000715 	.word	0x08000715
 80006ac:	08000715 	.word	0x08000715
 80006b0:	08000715 	.word	0x08000715
 80006b4:	08000715 	.word	0x08000715
 80006b8:	08000715 	.word	0x08000715
 80006bc:	08000715 	.word	0x08000715
	{
	case 0: NVIC_IRQ6_EXTI0_Disable    ; break;
 80006c0:	4b1a      	ldr	r3, [pc, #104]	; (800072c <Disable_NVIC+0xc4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a19      	ldr	r2, [pc, #100]	; (800072c <Disable_NVIC+0xc4>)
 80006c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	e029      	b.n	8000722 <Disable_NVIC+0xba>
	case 1: NVIC_IRQ7_EXTI1_Disable    ; break;
 80006ce:	4b17      	ldr	r3, [pc, #92]	; (800072c <Disable_NVIC+0xc4>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a16      	ldr	r2, [pc, #88]	; (800072c <Disable_NVIC+0xc4>)
 80006d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006d8:	6013      	str	r3, [r2, #0]
 80006da:	e022      	b.n	8000722 <Disable_NVIC+0xba>
	case 2: NVIC_IRQ8_EXTI2_Disable    ; break;
 80006dc:	4b13      	ldr	r3, [pc, #76]	; (800072c <Disable_NVIC+0xc4>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a12      	ldr	r2, [pc, #72]	; (800072c <Disable_NVIC+0xc4>)
 80006e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006e6:	6013      	str	r3, [r2, #0]
 80006e8:	e01b      	b.n	8000722 <Disable_NVIC+0xba>
	case 3: NVIC_IRQ9_EXTI3_Disable    ; break;
 80006ea:	4b10      	ldr	r3, [pc, #64]	; (800072c <Disable_NVIC+0xc4>)
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	4a0f      	ldr	r2, [pc, #60]	; (800072c <Disable_NVIC+0xc4>)
 80006f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006f4:	6013      	str	r3, [r2, #0]
 80006f6:	e014      	b.n	8000722 <Disable_NVIC+0xba>
	case 4: NVIC_IRQ10_EXTI4_Disable    ; break;
 80006f8:	4b0c      	ldr	r3, [pc, #48]	; (800072c <Disable_NVIC+0xc4>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a0b      	ldr	r2, [pc, #44]	; (800072c <Disable_NVIC+0xc4>)
 80006fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	e00d      	b.n	8000722 <Disable_NVIC+0xba>
	case 5:
	case 6:
	case 7:
	case 8:
	case 9:
		NVIC_IRQ23_EXTI5_9_Disable; break;
 8000706:	4b09      	ldr	r3, [pc, #36]	; (800072c <Disable_NVIC+0xc4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a08      	ldr	r2, [pc, #32]	; (800072c <Disable_NVIC+0xc4>)
 800070c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000710:	6013      	str	r3, [r2, #0]
 8000712:	e006      	b.n	8000722 <Disable_NVIC+0xba>
	case 11:
	case 12:
	case 13:
	case 14:
	case 15:
		NVIC_IRQ40_EXTI10_15_Disable; break;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <Disable_NVIC+0xc8>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a05      	ldr	r2, [pc, #20]	; (8000730 <Disable_NVIC+0xc8>)
 800071a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800071e:	6013      	str	r3, [r2, #0]
 8000720:	bf00      	nop
	}
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr
 800072c:	e000e180 	.word	0xe000e180
 8000730:	e000e184 	.word	0xe000e184

08000734 <Update_EXTI>:


void Update_EXTI (EXTI_PinConfig_t* EXTI_Config)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
	// 1- configure GPIO to be AF Input -> Floating input
	GPIO_PinConfig_t  PinCfg;
	PinCfg.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PIN ;
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	891b      	ldrh	r3, [r3, #8]
 8000740:	813b      	strh	r3, [r7, #8]
	PinCfg.GPIO_MODE = GPIO_MODE_INPUT_FLO;
 8000742:	2301      	movs	r3, #1
 8000744:	72bb      	strb	r3, [r7, #10]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCfg);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	f107 0208 	add.w	r2, r7, #8
 800074e:	4611      	mov	r1, r2
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fa4a 	bl	8000bea <MCAL_GPIO_Init>

	// 2- UPDATE AFIO to Route between EXTI line with PORT A,B,C,D
	uint8_t  AFIO_EXTICR_index = EXTI_Config->EXTI_PIN.EXTIInputLineNumber / 4;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	881b      	ldrh	r3, [r3, #0]
 800075a:	089b      	lsrs	r3, r3, #2
 800075c:	b29b      	uxth	r3, r3
 800075e:	73fb      	strb	r3, [r7, #15]
	uint8_t  AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.EXTIInputLineNumber % 4) * 4;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	881b      	ldrh	r3, [r3, #0]
 8000764:	b2db      	uxtb	r3, r3
 8000766:	f003 0303 	and.w	r3, r3, #3
 800076a:	b2db      	uxtb	r3, r3
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	73bb      	strb	r3, [r7, #14]
	// clear Four Bit
	AFIO->EXTICR[AFIO_EXTICR_index] &= ~( 0xf << AFIO_EXTICR_Position );
 8000770:	4a5f      	ldr	r2, [pc, #380]	; (80008f0 <Update_EXTI+0x1bc>)
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	3302      	adds	r3, #2
 8000776:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800077a:	7bbb      	ldrb	r3, [r7, #14]
 800077c:	210f      	movs	r1, #15
 800077e:	fa01 f303 	lsl.w	r3, r1, r3
 8000782:	43db      	mvns	r3, r3
 8000784:	4618      	mov	r0, r3
 8000786:	495a      	ldr	r1, [pc, #360]	; (80008f0 <Update_EXTI+0x1bc>)
 8000788:	7bfb      	ldrb	r3, [r7, #15]
 800078a:	4002      	ands	r2, r0
 800078c:	3302      	adds	r3, #2
 800078e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	AFIO->EXTICR[AFIO_EXTICR_index] |= (( AFIO_GPIO_EXTI_Mapping( EXTI_Config->EXTI_PIN.GPIO_Port ) &0xf )<< AFIO_EXTICR_Position );
 8000792:	4a57      	ldr	r2, [pc, #348]	; (80008f0 <Update_EXTI+0x1bc>)
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	3302      	adds	r3, #2
 8000798:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	685b      	ldr	r3, [r3, #4]
 80007a0:	4954      	ldr	r1, [pc, #336]	; (80008f4 <Update_EXTI+0x1c0>)
 80007a2:	428b      	cmp	r3, r1
 80007a4:	d016      	beq.n	80007d4 <Update_EXTI+0xa0>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	4953      	ldr	r1, [pc, #332]	; (80008f8 <Update_EXTI+0x1c4>)
 80007ac:	428b      	cmp	r3, r1
 80007ae:	d00f      	beq.n	80007d0 <Update_EXTI+0x9c>
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	4951      	ldr	r1, [pc, #324]	; (80008fc <Update_EXTI+0x1c8>)
 80007b6:	428b      	cmp	r3, r1
 80007b8:	d008      	beq.n	80007cc <Update_EXTI+0x98>
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	685b      	ldr	r3, [r3, #4]
 80007be:	4950      	ldr	r1, [pc, #320]	; (8000900 <Update_EXTI+0x1cc>)
 80007c0:	428b      	cmp	r3, r1
 80007c2:	d101      	bne.n	80007c8 <Update_EXTI+0x94>
 80007c4:	2303      	movs	r3, #3
 80007c6:	e006      	b.n	80007d6 <Update_EXTI+0xa2>
 80007c8:	2300      	movs	r3, #0
 80007ca:	e004      	b.n	80007d6 <Update_EXTI+0xa2>
 80007cc:	2302      	movs	r3, #2
 80007ce:	e002      	b.n	80007d6 <Update_EXTI+0xa2>
 80007d0:	2301      	movs	r3, #1
 80007d2:	e000      	b.n	80007d6 <Update_EXTI+0xa2>
 80007d4:	2300      	movs	r3, #0
 80007d6:	7bb9      	ldrb	r1, [r7, #14]
 80007d8:	408b      	lsls	r3, r1
 80007da:	4618      	mov	r0, r3
 80007dc:	4944      	ldr	r1, [pc, #272]	; (80008f0 <Update_EXTI+0x1bc>)
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	4302      	orrs	r2, r0
 80007e2:	3302      	adds	r3, #2
 80007e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	//3-Update Rising and Falling Register
	EXTI->RTSR &=~(1<< EXTI_Config->EXTI_PIN.EXTIInputLineNumber);
 80007e8:	4b46      	ldr	r3, [pc, #280]	; (8000904 <Update_EXTI+0x1d0>)
 80007ea:	689b      	ldr	r3, [r3, #8]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	8812      	ldrh	r2, [r2, #0]
 80007f0:	4611      	mov	r1, r2
 80007f2:	2201      	movs	r2, #1
 80007f4:	408a      	lsls	r2, r1
 80007f6:	43d2      	mvns	r2, r2
 80007f8:	4611      	mov	r1, r2
 80007fa:	4a42      	ldr	r2, [pc, #264]	; (8000904 <Update_EXTI+0x1d0>)
 80007fc:	400b      	ands	r3, r1
 80007fe:	6093      	str	r3, [r2, #8]
	EXTI->FTSR &=~(1<< EXTI_Config->EXTI_PIN.EXTIInputLineNumber);
 8000800:	4b40      	ldr	r3, [pc, #256]	; (8000904 <Update_EXTI+0x1d0>)
 8000802:	68db      	ldr	r3, [r3, #12]
 8000804:	687a      	ldr	r2, [r7, #4]
 8000806:	8812      	ldrh	r2, [r2, #0]
 8000808:	4611      	mov	r1, r2
 800080a:	2201      	movs	r2, #1
 800080c:	408a      	lsls	r2, r1
 800080e:	43d2      	mvns	r2, r2
 8000810:	4611      	mov	r1, r2
 8000812:	4a3c      	ldr	r2, [pc, #240]	; (8000904 <Update_EXTI+0x1d0>)
 8000814:	400b      	ands	r3, r1
 8000816:	60d3      	str	r3, [r2, #12]
	if(EXTI_Config->Trigger_Case == EXTI_Trigger_RISING)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7b1b      	ldrb	r3, [r3, #12]
 800081c:	2b00      	cmp	r3, #0
 800081e:	d10b      	bne.n	8000838 <Update_EXTI+0x104>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTIInputLineNumber);
 8000820:	4b38      	ldr	r3, [pc, #224]	; (8000904 <Update_EXTI+0x1d0>)
 8000822:	689b      	ldr	r3, [r3, #8]
 8000824:	687a      	ldr	r2, [r7, #4]
 8000826:	8812      	ldrh	r2, [r2, #0]
 8000828:	4611      	mov	r1, r2
 800082a:	2201      	movs	r2, #1
 800082c:	408a      	lsls	r2, r1
 800082e:	4611      	mov	r1, r2
 8000830:	4a34      	ldr	r2, [pc, #208]	; (8000904 <Update_EXTI+0x1d0>)
 8000832:	430b      	orrs	r3, r1
 8000834:	6093      	str	r3, [r2, #8]
 8000836:	e029      	b.n	800088c <Update_EXTI+0x158>
	}
	else if(EXTI_Config->Trigger_Case == EXTI_Trigger_FALLING)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	7b1b      	ldrb	r3, [r3, #12]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d10b      	bne.n	8000858 <Update_EXTI+0x124>
	{
		EXTI->FTSR |=(1<< EXTI_Config->EXTI_PIN.EXTIInputLineNumber);
 8000840:	4b30      	ldr	r3, [pc, #192]	; (8000904 <Update_EXTI+0x1d0>)
 8000842:	68db      	ldr	r3, [r3, #12]
 8000844:	687a      	ldr	r2, [r7, #4]
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	4611      	mov	r1, r2
 800084a:	2201      	movs	r2, #1
 800084c:	408a      	lsls	r2, r1
 800084e:	4611      	mov	r1, r2
 8000850:	4a2c      	ldr	r2, [pc, #176]	; (8000904 <Update_EXTI+0x1d0>)
 8000852:	430b      	orrs	r3, r1
 8000854:	60d3      	str	r3, [r2, #12]
 8000856:	e019      	b.n	800088c <Update_EXTI+0x158>
	}
	else if (EXTI_Config->Trigger_Case == EXTI_Trigger_RisingGAndFalling)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	7b1b      	ldrb	r3, [r3, #12]
 800085c:	2b02      	cmp	r3, #2
 800085e:	d115      	bne.n	800088c <Update_EXTI+0x158>
	{
		EXTI->RTSR |= (1<< EXTI_Config->EXTI_PIN.EXTIInputLineNumber);
 8000860:	4b28      	ldr	r3, [pc, #160]	; (8000904 <Update_EXTI+0x1d0>)
 8000862:	689b      	ldr	r3, [r3, #8]
 8000864:	687a      	ldr	r2, [r7, #4]
 8000866:	8812      	ldrh	r2, [r2, #0]
 8000868:	4611      	mov	r1, r2
 800086a:	2201      	movs	r2, #1
 800086c:	408a      	lsls	r2, r1
 800086e:	4611      	mov	r1, r2
 8000870:	4a24      	ldr	r2, [pc, #144]	; (8000904 <Update_EXTI+0x1d0>)
 8000872:	430b      	orrs	r3, r1
 8000874:	6093      	str	r3, [r2, #8]
		EXTI->FTSR |=(1<< EXTI_Config->EXTI_PIN.EXTIInputLineNumber);
 8000876:	4b23      	ldr	r3, [pc, #140]	; (8000904 <Update_EXTI+0x1d0>)
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	687a      	ldr	r2, [r7, #4]
 800087c:	8812      	ldrh	r2, [r2, #0]
 800087e:	4611      	mov	r1, r2
 8000880:	2201      	movs	r2, #1
 8000882:	408a      	lsls	r2, r1
 8000884:	4611      	mov	r1, r2
 8000886:	4a1f      	ldr	r2, [pc, #124]	; (8000904 <Update_EXTI+0x1d0>)
 8000888:	430b      	orrs	r3, r1
 800088a:	60d3      	str	r3, [r2, #12]
	}

	//4- Update IRQ Handling CAll BACK
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTIInputLineNumber] = EXTI_Config->P_IRQ_CallBack;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	881b      	ldrh	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	691b      	ldr	r3, [r3, #16]
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <Update_EXTI+0x1d4>)
 8000898:	f842 3021 	str.w	r3, [r2, r1, lsl #2]


	// 5- Enable/Disable IRQ EXTI& NVIC
	if( EXTI_Config->IRQ_EN == EXTI_IRQ_Enable )
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	7b5b      	ldrb	r3, [r3, #13]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d110      	bne.n	80008c6 <Update_EXTI+0x192>
	{
		EXTI->IMR |=(1<< EXTI_Config->EXTI_PIN.EXTIInputLineNumber);
 80008a4:	4b17      	ldr	r3, [pc, #92]	; (8000904 <Update_EXTI+0x1d0>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	687a      	ldr	r2, [r7, #4]
 80008aa:	8812      	ldrh	r2, [r2, #0]
 80008ac:	4611      	mov	r1, r2
 80008ae:	2201      	movs	r2, #1
 80008b0:	408a      	lsls	r2, r1
 80008b2:	4611      	mov	r1, r2
 80008b4:	4a13      	ldr	r2, [pc, #76]	; (8000904 <Update_EXTI+0x1d0>)
 80008b6:	430b      	orrs	r3, r1
 80008b8:	6013      	str	r3, [r2, #0]
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTIInputLineNumber);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	881b      	ldrh	r3, [r3, #0]
 80008be:	4618      	mov	r0, r3
 80008c0:	f7ff fe6c 	bl	800059c <Enable_NVIC>
	{
		EXTI->IMR &=~(1<< EXTI_Config->EXTI_PIN.EXTIInputLineNumber);
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTIInputLineNumber);
	}

}
 80008c4:	e010      	b.n	80008e8 <Update_EXTI+0x1b4>
		EXTI->IMR &=~(1<< EXTI_Config->EXTI_PIN.EXTIInputLineNumber);
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <Update_EXTI+0x1d0>)
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	8812      	ldrh	r2, [r2, #0]
 80008ce:	4611      	mov	r1, r2
 80008d0:	2201      	movs	r2, #1
 80008d2:	408a      	lsls	r2, r1
 80008d4:	43d2      	mvns	r2, r2
 80008d6:	4611      	mov	r1, r2
 80008d8:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <Update_EXTI+0x1d0>)
 80008da:	400b      	ands	r3, r1
 80008dc:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTIInputLineNumber);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	881b      	ldrh	r3, [r3, #0]
 80008e2:	4618      	mov	r0, r3
 80008e4:	f7ff fec0 	bl	8000668 <Disable_NVIC>
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40010000 	.word	0x40010000
 80008f4:	40010800 	.word	0x40010800
 80008f8:	40010c00 	.word	0x40010c00
 80008fc:	40011000 	.word	0x40011000
 8000900:	40011400 	.word	0x40011400
 8000904:	40010400 	.word	0x40010400
 8000908:	20000024 	.word	0x20000024

0800090c <MCAL_EXTI_GPIO_Init>:
 *                     but LQFP48 package has only GPIO A,B,part of C,D exported as external PINS from The MCU
 *                     Also Mandatory to Enable RCC Clock For AFIO and the Corresponding GPIO
 */

void MCAL_EXTI_GPIO_Init   (EXTI_PinConfig_t* EXTI_Config )
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	Update_EXTI (EXTI_Config);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff ff0d 	bl	8000734 <Update_EXTI>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <EXTI0_IRQHandler>:
//     ISR Function
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*


void EXTI0_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit
	EXTI->PR |=1<<0;
 8000928:	4b05      	ldr	r3, [pc, #20]	; (8000940 <EXTI0_IRQHandler+0x1c>)
 800092a:	695b      	ldr	r3, [r3, #20]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <EXTI0_IRQHandler+0x1c>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6153      	str	r3, [r2, #20]
	// call IRQ
	GP_IRQ_CallBack[0]();
 8000934:	4b03      	ldr	r3, [pc, #12]	; (8000944 <EXTI0_IRQHandler+0x20>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4798      	blx	r3
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40010400 	.word	0x40010400
 8000944:	20000024 	.word	0x20000024

08000948 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit
	EXTI->PR |=1<<1;
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <EXTI1_IRQHandler+0x1c>)
 800094e:	695b      	ldr	r3, [r3, #20]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <EXTI1_IRQHandler+0x1c>)
 8000952:	f043 0302 	orr.w	r3, r3, #2
 8000956:	6153      	str	r3, [r2, #20]
	// call IRQ
	GP_IRQ_CallBack[1]();
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <EXTI1_IRQHandler+0x20>)
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	4798      	blx	r3
}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	40010400 	.word	0x40010400
 8000968:	20000024 	.word	0x20000024

0800096c <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit
	EXTI->PR |=1<<2;
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <EXTI2_IRQHandler+0x1c>)
 8000972:	695b      	ldr	r3, [r3, #20]
 8000974:	4a04      	ldr	r2, [pc, #16]	; (8000988 <EXTI2_IRQHandler+0x1c>)
 8000976:	f043 0304 	orr.w	r3, r3, #4
 800097a:	6153      	str	r3, [r2, #20]
	// call IRQ
	GP_IRQ_CallBack[2]();
 800097c:	4b03      	ldr	r3, [pc, #12]	; (800098c <EXTI2_IRQHandler+0x20>)
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	4798      	blx	r3
}
 8000982:	bf00      	nop
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	40010400 	.word	0x40010400
 800098c:	20000024 	.word	0x20000024

08000990 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit
	EXTI->PR |=1<<3;
 8000994:	4b05      	ldr	r3, [pc, #20]	; (80009ac <EXTI3_IRQHandler+0x1c>)
 8000996:	695b      	ldr	r3, [r3, #20]
 8000998:	4a04      	ldr	r2, [pc, #16]	; (80009ac <EXTI3_IRQHandler+0x1c>)
 800099a:	f043 0308 	orr.w	r3, r3, #8
 800099e:	6153      	str	r3, [r2, #20]
	// call IRQ
	GP_IRQ_CallBack[3]();
 80009a0:	4b03      	ldr	r3, [pc, #12]	; (80009b0 <EXTI3_IRQHandler+0x20>)
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	4798      	blx	r3
}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	40010400 	.word	0x40010400
 80009b0:	20000024 	.word	0x20000024

080009b4 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit
	EXTI->PR |=1<<4;
 80009b8:	4b05      	ldr	r3, [pc, #20]	; (80009d0 <EXTI4_IRQHandler+0x1c>)
 80009ba:	695b      	ldr	r3, [r3, #20]
 80009bc:	4a04      	ldr	r2, [pc, #16]	; (80009d0 <EXTI4_IRQHandler+0x1c>)
 80009be:	f043 0310 	orr.w	r3, r3, #16
 80009c2:	6153      	str	r3, [r2, #20]
	// call IRQ
	GP_IRQ_CallBack[4]();
 80009c4:	4b03      	ldr	r3, [pc, #12]	; (80009d4 <EXTI4_IRQHandler+0x20>)
 80009c6:	691b      	ldr	r3, [r3, #16]
 80009c8:	4798      	blx	r3
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40010400 	.word	0x40010400
 80009d4:	20000024 	.word	0x20000024

080009d8 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<5  ) { EXTI->PR |= (1<<5); GP_IRQ_CallBack[5](); }
 80009dc:	4b26      	ldr	r3, [pc, #152]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	f003 0320 	and.w	r3, r3, #32
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d008      	beq.n	80009fa <EXTI9_5_IRQHandler+0x22>
 80009e8:	4b23      	ldr	r3, [pc, #140]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 80009ee:	f043 0320 	orr.w	r3, r3, #32
 80009f2:	6153      	str	r3, [r2, #20]
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <EXTI9_5_IRQHandler+0xa4>)
 80009f6:	695b      	ldr	r3, [r3, #20]
 80009f8:	4798      	blx	r3
	if( EXTI->PR & 1<<6  ) { EXTI->PR |= (1<<6); GP_IRQ_CallBack[6](); }
 80009fa:	4b1f      	ldr	r3, [pc, #124]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 80009fc:	695b      	ldr	r3, [r3, #20]
 80009fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d008      	beq.n	8000a18 <EXTI9_5_IRQHandler+0x40>
 8000a06:	4b1c      	ldr	r3, [pc, #112]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 8000a08:	695b      	ldr	r3, [r3, #20]
 8000a0a:	4a1b      	ldr	r2, [pc, #108]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 8000a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a10:	6153      	str	r3, [r2, #20]
 8000a12:	4b1a      	ldr	r3, [pc, #104]	; (8000a7c <EXTI9_5_IRQHandler+0xa4>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	4798      	blx	r3
	if( EXTI->PR & 1<<7  ) { EXTI->PR |= (1<<7); GP_IRQ_CallBack[7](); }
 8000a18:	4b17      	ldr	r3, [pc, #92]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 8000a1a:	695b      	ldr	r3, [r3, #20]
 8000a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d008      	beq.n	8000a36 <EXTI9_5_IRQHandler+0x5e>
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 8000a26:	695b      	ldr	r3, [r3, #20]
 8000a28:	4a13      	ldr	r2, [pc, #76]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 8000a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2e:	6153      	str	r3, [r2, #20]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <EXTI9_5_IRQHandler+0xa4>)
 8000a32:	69db      	ldr	r3, [r3, #28]
 8000a34:	4798      	blx	r3
	if( EXTI->PR & 1<<8  ) { EXTI->PR |= (1<<8); GP_IRQ_CallBack[8](); }
 8000a36:	4b10      	ldr	r3, [pc, #64]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d008      	beq.n	8000a54 <EXTI9_5_IRQHandler+0x7c>
 8000a42:	4b0d      	ldr	r3, [pc, #52]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 8000a44:	695b      	ldr	r3, [r3, #20]
 8000a46:	4a0c      	ldr	r2, [pc, #48]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 8000a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a4c:	6153      	str	r3, [r2, #20]
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <EXTI9_5_IRQHandler+0xa4>)
 8000a50:	6a1b      	ldr	r3, [r3, #32]
 8000a52:	4798      	blx	r3
	if( EXTI->PR & 1<<9  ) { EXTI->PR |= (1<<9); GP_IRQ_CallBack[9](); }
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 8000a56:	695b      	ldr	r3, [r3, #20]
 8000a58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d008      	beq.n	8000a72 <EXTI9_5_IRQHandler+0x9a>
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 8000a62:	695b      	ldr	r3, [r3, #20]
 8000a64:	4a04      	ldr	r2, [pc, #16]	; (8000a78 <EXTI9_5_IRQHandler+0xa0>)
 8000a66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a6a:	6153      	str	r3, [r2, #20]
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <EXTI9_5_IRQHandler+0xa4>)
 8000a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a70:	4798      	blx	r3
}
 8000a72:	bf00      	nop
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40010400 	.word	0x40010400
 8000a7c:	20000024 	.word	0x20000024

08000a80 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10  ) { EXTI->PR |= (1<<10); GP_IRQ_CallBack[10](); }
 8000a84:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000a86:	695b      	ldr	r3, [r3, #20]
 8000a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d008      	beq.n	8000aa2 <EXTI15_10_IRQHandler+0x22>
 8000a90:	4b2a      	ldr	r3, [pc, #168]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000a92:	695b      	ldr	r3, [r3, #20]
 8000a94:	4a29      	ldr	r2, [pc, #164]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a9a:	6153      	str	r3, [r2, #20]
 8000a9c:	4b28      	ldr	r3, [pc, #160]	; (8000b40 <EXTI15_10_IRQHandler+0xc0>)
 8000a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000aa0:	4798      	blx	r3
	if( EXTI->PR & 1<<11  ) { EXTI->PR |= (1<<11); GP_IRQ_CallBack[11](); }
 8000aa2:	4b26      	ldr	r3, [pc, #152]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000aa4:	695b      	ldr	r3, [r3, #20]
 8000aa6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d008      	beq.n	8000ac0 <EXTI15_10_IRQHandler+0x40>
 8000aae:	4b23      	ldr	r3, [pc, #140]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000ab0:	695b      	ldr	r3, [r3, #20]
 8000ab2:	4a22      	ldr	r2, [pc, #136]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000ab4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ab8:	6153      	str	r3, [r2, #20]
 8000aba:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <EXTI15_10_IRQHandler+0xc0>)
 8000abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000abe:	4798      	blx	r3
	if( EXTI->PR & 1<<12  ) { EXTI->PR |= (1<<12); GP_IRQ_CallBack[12](); }
 8000ac0:	4b1e      	ldr	r3, [pc, #120]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000ac2:	695b      	ldr	r3, [r3, #20]
 8000ac4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d008      	beq.n	8000ade <EXTI15_10_IRQHandler+0x5e>
 8000acc:	4b1b      	ldr	r3, [pc, #108]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000ace:	695b      	ldr	r3, [r3, #20]
 8000ad0:	4a1a      	ldr	r2, [pc, #104]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000ad2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000ad6:	6153      	str	r3, [r2, #20]
 8000ad8:	4b19      	ldr	r3, [pc, #100]	; (8000b40 <EXTI15_10_IRQHandler+0xc0>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	4798      	blx	r3
	if( EXTI->PR & 1<<13  ) { EXTI->PR |= (1<<13); GP_IRQ_CallBack[13](); }
 8000ade:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000ae0:	695b      	ldr	r3, [r3, #20]
 8000ae2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d008      	beq.n	8000afc <EXTI15_10_IRQHandler+0x7c>
 8000aea:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000aec:	695b      	ldr	r3, [r3, #20]
 8000aee:	4a13      	ldr	r2, [pc, #76]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000af0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000af4:	6153      	str	r3, [r2, #20]
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <EXTI15_10_IRQHandler+0xc0>)
 8000af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000afa:	4798      	blx	r3
	if( EXTI->PR & 1<<14  ) { EXTI->PR |= (1<<14); GP_IRQ_CallBack[14](); }
 8000afc:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000afe:	695b      	ldr	r3, [r3, #20]
 8000b00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d008      	beq.n	8000b1a <EXTI15_10_IRQHandler+0x9a>
 8000b08:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000b0a:	695b      	ldr	r3, [r3, #20]
 8000b0c:	4a0b      	ldr	r2, [pc, #44]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000b0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b12:	6153      	str	r3, [r2, #20]
 8000b14:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <EXTI15_10_IRQHandler+0xc0>)
 8000b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000b18:	4798      	blx	r3
	if( EXTI->PR & 1<<15  ) { EXTI->PR |= (1<<15); GP_IRQ_CallBack[15](); }
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000b1c:	695b      	ldr	r3, [r3, #20]
 8000b1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d008      	beq.n	8000b38 <EXTI15_10_IRQHandler+0xb8>
 8000b26:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000b28:	695b      	ldr	r3, [r3, #20]
 8000b2a:	4a04      	ldr	r2, [pc, #16]	; (8000b3c <EXTI15_10_IRQHandler+0xbc>)
 8000b2c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b30:	6153      	str	r3, [r2, #20]
 8000b32:	4b03      	ldr	r3, [pc, #12]	; (8000b40 <EXTI15_10_IRQHandler+0xc0>)
 8000b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000b36:	4798      	blx	r3
}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40010400 	.word	0x40010400
 8000b40:	20000024 	.word	0x20000024

08000b44 <Get_CRLH_Position>:


#include"stm32_f103c6_gpio_driver.h"

uint8_t Get_CRLH_Position (uint16_t PinNumber)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	2b80      	cmp	r3, #128	; 0x80
 8000b52:	d042      	beq.n	8000bda <Get_CRLH_Position+0x96>
 8000b54:	2b80      	cmp	r3, #128	; 0x80
 8000b56:	dc11      	bgt.n	8000b7c <Get_CRLH_Position+0x38>
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	d036      	beq.n	8000bca <Get_CRLH_Position+0x86>
 8000b5c:	2b08      	cmp	r3, #8
 8000b5e:	dc06      	bgt.n	8000b6e <Get_CRLH_Position+0x2a>
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d02e      	beq.n	8000bc2 <Get_CRLH_Position+0x7e>
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d02e      	beq.n	8000bc6 <Get_CRLH_Position+0x82>
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d028      	beq.n	8000bbe <Get_CRLH_Position+0x7a>
 8000b6c:	e037      	b.n	8000bde <Get_CRLH_Position+0x9a>
 8000b6e:	2b20      	cmp	r3, #32
 8000b70:	d02f      	beq.n	8000bd2 <Get_CRLH_Position+0x8e>
 8000b72:	2b40      	cmp	r3, #64	; 0x40
 8000b74:	d02f      	beq.n	8000bd6 <Get_CRLH_Position+0x92>
 8000b76:	2b10      	cmp	r3, #16
 8000b78:	d029      	beq.n	8000bce <Get_CRLH_Position+0x8a>
 8000b7a:	e030      	b.n	8000bde <Get_CRLH_Position+0x9a>
 8000b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b80:	d023      	beq.n	8000bca <Get_CRLH_Position+0x86>
 8000b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b86:	dc09      	bgt.n	8000b9c <Get_CRLH_Position+0x58>
 8000b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b8c:	d019      	beq.n	8000bc2 <Get_CRLH_Position+0x7e>
 8000b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b92:	d018      	beq.n	8000bc6 <Get_CRLH_Position+0x82>
 8000b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b98:	d011      	beq.n	8000bbe <Get_CRLH_Position+0x7a>
 8000b9a:	e020      	b.n	8000bde <Get_CRLH_Position+0x9a>
 8000b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ba0:	d017      	beq.n	8000bd2 <Get_CRLH_Position+0x8e>
 8000ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ba6:	dc03      	bgt.n	8000bb0 <Get_CRLH_Position+0x6c>
 8000ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bac:	d00f      	beq.n	8000bce <Get_CRLH_Position+0x8a>
 8000bae:	e016      	b.n	8000bde <Get_CRLH_Position+0x9a>
 8000bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bb4:	d00f      	beq.n	8000bd6 <Get_CRLH_Position+0x92>
 8000bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bba:	d00e      	beq.n	8000bda <Get_CRLH_Position+0x96>
 8000bbc:	e00f      	b.n	8000bde <Get_CRLH_Position+0x9a>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0; break;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e00e      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4; break;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	e00c      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8; break;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	e00a      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12; break;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	e008      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16; break;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	e006      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20; break;
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	e004      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24; break;
 8000bd6:	2318      	movs	r3, #24
 8000bd8:	e002      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28; break;
 8000bda:	231c      	movs	r3, #28
 8000bdc:	e000      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	}
	return 0;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <MCAL_GPIO_Init>:
 * Note              - stm32f103c6 MCU has GPIO A,B,C,D Modules
 *                     but LQFP48 package has only GPIO A,B,part of C,D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init(GPIO_Typedef* GPIOx,GPIO_PinConfig_t* pinConfig)
{
 8000bea:	b590      	push	{r4, r7, lr}
 8000bec:	b085      	sub	sp, #20
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]

	// Port configuration register low (GPIOx_CRL) configure pin from  0 >> 7
	// Port configuration register high (GPIOx_CRH) configure pin from  8 >> 15
	volatile uint32_t* configregister = NULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]
	configregister =(pinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	2bff      	cmp	r3, #255	; 0xff
 8000c02:	d801      	bhi.n	8000c08 <MCAL_GPIO_Init+0x1e>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	e001      	b.n	8000c0c <MCAL_GPIO_Init+0x22>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	60bb      	str	r3, [r7, #8]
	// clear CNF0[1:0] MODE0[1:0]
	(*configregister) &=~( 0xf<< Get_CRLH_Position(pinConfig->GPIO_PinNumber));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff96 	bl	8000b44 <Get_CRLH_Position>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	4093      	lsls	r3, r2
 8000c20:	43da      	mvns	r2, r3
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	401a      	ands	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	601a      	str	r2, [r3, #0]

	// if pin is output
	if(pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP )
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	789b      	ldrb	r3, [r3, #2]
 8000c30:	2b07      	cmp	r3, #7
 8000c32:	d00b      	beq.n	8000c4c <MCAL_GPIO_Init+0x62>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	789b      	ldrb	r3, [r3, #2]
 8000c38:	2b06      	cmp	r3, #6
 8000c3a:	d007      	beq.n	8000c4c <MCAL_GPIO_Init+0x62>
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	789b      	ldrb	r3, [r3, #2]
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	d003      	beq.n	8000c4c <MCAL_GPIO_Init+0x62>
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	789b      	ldrb	r3, [r3, #2]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d10e      	bne.n	8000c6a <MCAL_GPIO_Init+0x80>
	{
		PIN_Config =( (((pinConfig->GPIO_MODE - 4)<< 2) | (pinConfig->GPIO_Output_Speed))& 0x0f );
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	789b      	ldrb	r3, [r3, #2]
 8000c50:	3b04      	subs	r3, #4
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	b25a      	sxtb	r2, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	78db      	ldrb	r3, [r3, #3]
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e02c      	b.n	8000cc4 <MCAL_GPIO_Init+0xda>
	}
	// if pin is input
	else
	{
		if(pinConfig->GPIO_MODE == GPIO_MODE_ANALOG || pinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO  )
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	789b      	ldrb	r3, [r3, #2]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <MCAL_GPIO_Init+0x90>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	789b      	ldrb	r3, [r3, #2]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d107      	bne.n	8000c8a <MCAL_GPIO_Init+0xa0>
		{
			PIN_Config =( (((pinConfig->GPIO_MODE )<< 2) | 0x0 )& 0x0f );
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	789b      	ldrb	r3, [r3, #2]
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e01c      	b.n	8000cc4 <MCAL_GPIO_Init+0xda>
		}
		else if(pinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) // consider it as input floating
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	789b      	ldrb	r3, [r3, #2]
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	d102      	bne.n	8000c98 <MCAL_GPIO_Init+0xae>
		{
			PIN_Config =( (((GPIO_MODE_INPUT_FLO )<< 2) | 0x0 )& 0x0f );
 8000c92:	2304      	movs	r3, #4
 8000c94:	73fb      	strb	r3, [r7, #15]
 8000c96:	e015      	b.n	8000cc4 <MCAL_GPIO_Init+0xda>
		}
		else
		{
			PIN_Config =( (((GPIO_MODE_INPUT_PU )<< 2) | 0x0 )& 0x0f );
 8000c98:	2308      	movs	r3, #8
 8000c9a:	73fb      	strb	r3, [r7, #15]
			if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	789b      	ldrb	r3, [r3, #2]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d107      	bne.n	8000cb4 <MCAL_GPIO_Init+0xca>
			{
				// Table 20. port bit configuration table PxODR 1
				GPIOx->ODR |= pinConfig->GPIO_PinNumber ;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	8812      	ldrh	r2, [r2, #0]
 8000cac:	431a      	orrs	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	e007      	b.n	8000cc4 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// Table 20. port bit configuration table PxODR 0
				GPIOx->ODR &=~( pinConfig->GPIO_PinNumber) ;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	8812      	ldrh	r2, [r2, #0]
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// write on the CRL OR CRH
	(*configregister) |= ((PIN_Config)<< Get_CRLH_Position(pinConfig->GPIO_PinNumber));
 8000cc4:	7bfc      	ldrb	r4, [r7, #15]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff3a 	bl	8000b44 <Get_CRLH_Position>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	fa04 f203 	lsl.w	r2, r4, r3
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}

08000ce8 <MCAL_GPIO_WritePin>:
 * @param  [in]      - value : set pin value according to  @ref GPIO_PINS_define
 * @retval           - none
 * Note              - none
 */
void MCAL_GPIO_WritePin ( GPIO_Typedef* GPIOx, uint16_t PinNumber, uint8_t value)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	707b      	strb	r3, [r7, #1]
	if( value != GPIO_PIN_RESET )
 8000cf8:	787b      	ldrb	r3, [r7, #1]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <MCAL_GPIO_WritePin+0x1e>
	{
		// GPIOx->ODR |= PinNumber;
		// or
		GPIOx->BSRR =PinNumber;
 8000cfe:	887a      	ldrh	r2, [r7, #2]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	611a      	str	r2, [r3, #16]
	else
	{
		GPIOx->BRR = PinNumber ;
	}

}
 8000d04:	e002      	b.n	8000d0c <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = PinNumber ;
 8000d06:	887a      	ldrh	r2, [r7, #2]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	615a      	str	r2, [r3, #20]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <MCAL_GPIO_WritePort>:
 * @param  [in]      - value : set port value
 * @retval           - none
 * Note              - none
 */
void MCAL_GPIO_WritePort( GPIO_Typedef* GPIOx, uint8_t value)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR =(uint32_t)value;
 8000d22:	78fa      	ldrb	r2, [r7, #3]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	60da      	str	r2, [r3, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr
	...

08000d34 <__libc_init_array>:
 8000d34:	b570      	push	{r4, r5, r6, lr}
 8000d36:	2500      	movs	r5, #0
 8000d38:	4e0c      	ldr	r6, [pc, #48]	; (8000d6c <__libc_init_array+0x38>)
 8000d3a:	4c0d      	ldr	r4, [pc, #52]	; (8000d70 <__libc_init_array+0x3c>)
 8000d3c:	1ba4      	subs	r4, r4, r6
 8000d3e:	10a4      	asrs	r4, r4, #2
 8000d40:	42a5      	cmp	r5, r4
 8000d42:	d109      	bne.n	8000d58 <__libc_init_array+0x24>
 8000d44:	f000 f81a 	bl	8000d7c <_init>
 8000d48:	2500      	movs	r5, #0
 8000d4a:	4e0a      	ldr	r6, [pc, #40]	; (8000d74 <__libc_init_array+0x40>)
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <__libc_init_array+0x44>)
 8000d4e:	1ba4      	subs	r4, r4, r6
 8000d50:	10a4      	asrs	r4, r4, #2
 8000d52:	42a5      	cmp	r5, r4
 8000d54:	d105      	bne.n	8000d62 <__libc_init_array+0x2e>
 8000d56:	bd70      	pop	{r4, r5, r6, pc}
 8000d58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d5c:	4798      	blx	r3
 8000d5e:	3501      	adds	r5, #1
 8000d60:	e7ee      	b.n	8000d40 <__libc_init_array+0xc>
 8000d62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d66:	4798      	blx	r3
 8000d68:	3501      	adds	r5, #1
 8000d6a:	e7f2      	b.n	8000d52 <__libc_init_array+0x1e>
 8000d6c:	08000db8 	.word	0x08000db8
 8000d70:	08000db8 	.word	0x08000db8
 8000d74:	08000db8 	.word	0x08000db8
 8000d78:	08000dbc 	.word	0x08000dbc

08000d7c <_init>:
 8000d7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d7e:	bf00      	nop
 8000d80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d82:	bc08      	pop	{r3}
 8000d84:	469e      	mov	lr, r3
 8000d86:	4770      	bx	lr

08000d88 <_fini>:
 8000d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d8a:	bf00      	nop
 8000d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d8e:	bc08      	pop	{r3}
 8000d90:	469e      	mov	lr, r3
 8000d92:	4770      	bx	lr
