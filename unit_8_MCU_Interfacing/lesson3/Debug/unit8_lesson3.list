
unit8_lesson3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c84  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08000db4  08000db4  00010db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000dcc  08000dcc  00010dd4  2**0
                  CONTENTS
  4 .ARM          00000000  08000dcc  08000dcc  00010dd4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000dcc  08000dd4  00010dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dcc  08000dcc  00010dcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000dd0  08000dd0  00010dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010dd4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000000  08000dd4  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000064  08000dd4  00020064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010dd4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004d38  00000000  00000000  00010dfd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000bfe  00000000  00000000  00015b35  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000d78  00000000  00000000  00016733  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000248  00000000  00000000  000174b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000001e0  00000000  00000000  000176f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000293b  00000000  00000000  000178d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0000285b  00000000  00000000  0001a213  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009f10  00000000  00000000  0001ca6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0002697e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000730  00000000  00000000  000269fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000d9c 	.word	0x08000d9c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000d9c 	.word	0x08000d9c

08000170 <clock_init>:
#include"stm32f103c6.h"
#include"stm32_f103c6_gpio_driver.h"
#include "stm32_f103c6_USART_driver.h"
#include "lcd.h"

void clock_init(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	RCC_GPIOA_CLK_EN();  /* to enable clock for GPIOA */
 8000174:	4b0d      	ldr	r3, [pc, #52]	; (80001ac <clock_init+0x3c>)
 8000176:	699b      	ldr	r3, [r3, #24]
 8000178:	4a0c      	ldr	r2, [pc, #48]	; (80001ac <clock_init+0x3c>)
 800017a:	f043 0304 	orr.w	r3, r3, #4
 800017e:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();  /* to enable clock for GPIOB */
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <clock_init+0x3c>)
 8000182:	699b      	ldr	r3, [r3, #24]
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <clock_init+0x3c>)
 8000186:	f043 0308 	orr.w	r3, r3, #8
 800018a:	6193      	str	r3, [r2, #24]
	RCC_GPIOC_CLK_EN();  /* to enable clock for GPIOC */
 800018c:	4b07      	ldr	r3, [pc, #28]	; (80001ac <clock_init+0x3c>)
 800018e:	699b      	ldr	r3, [r3, #24]
 8000190:	4a06      	ldr	r2, [pc, #24]	; (80001ac <clock_init+0x3c>)
 8000192:	f043 0310 	orr.w	r3, r3, #16
 8000196:	6193      	str	r3, [r2, #24]
	RCC_AFIO_CLK_EN();   /* to enable clock for AFIO  */
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <clock_init+0x3c>)
 800019a:	699b      	ldr	r3, [r3, #24]
 800019c:	4a03      	ldr	r2, [pc, #12]	; (80001ac <clock_init+0x3c>)
 800019e:	f043 0301 	orr.w	r3, r3, #1
 80001a2:	6193      	str	r3, [r2, #24]
}
 80001a4:	bf00      	nop
 80001a6:	46bd      	mov	sp, r7
 80001a8:	bc80      	pop	{r7}
 80001aa:	4770      	bx	lr
 80001ac:	40021000 	.word	0x40021000

080001b0 <GPIO_init>:
void GPIO_init(){
 80001b0:	b580      	push	{r7, lr}
 80001b2:	b082      	sub	sp, #8
 80001b4:	af00      	add	r7, sp, #0

	GPIO_PinConfig_t pincfg;
	// PA1 floating input
	pincfg.GPIO_PinNumber= GPIO_PIN_2;
 80001b6:	2304      	movs	r3, #4
 80001b8:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE =GPIO_MODE_OUTPUT_PP;
 80001ba:	2304      	movs	r3, #4
 80001bc:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80001be:	2301      	movs	r3, #1
 80001c0:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA , &pincfg);
 80001c2:	1d3b      	adds	r3, r7, #4
 80001c4:	4619      	mov	r1, r3
 80001c6:	4809      	ldr	r0, [pc, #36]	; (80001ec <GPIO_init+0x3c>)
 80001c8:	f000 fd0f 	bl	8000bea <MCAL_GPIO_Init>

	pincfg.GPIO_PinNumber= GPIO_PIN_5;
 80001cc:	2320      	movs	r3, #32
 80001ce:	80bb      	strh	r3, [r7, #4]
	pincfg.GPIO_MODE =GPIO_MODE_OUTPUT_PP;
 80001d0:	2304      	movs	r3, #4
 80001d2:	71bb      	strb	r3, [r7, #6]
	pincfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 80001d4:	2301      	movs	r3, #1
 80001d6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOA , &pincfg);
 80001d8:	1d3b      	adds	r3, r7, #4
 80001da:	4619      	mov	r1, r3
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <GPIO_init+0x3c>)
 80001de:	f000 fd04 	bl	8000bea <MCAL_GPIO_Init>

}
 80001e2:	bf00      	nop
 80001e4:	3708      	adds	r7, #8
 80001e6:	46bd      	mov	sp, r7
 80001e8:	bd80      	pop	{r7, pc}
 80001ea:	bf00      	nop
 80001ec:	40010800 	.word	0x40010800

080001f0 <wait_ms>:
void wait_ms(uint32_t time)
{
 80001f0:	b480      	push	{r7}
 80001f2:	b085      	sub	sp, #20
 80001f4:	af00      	add	r7, sp, #0
 80001f6:	6078      	str	r0, [r7, #4]
	uint32_t i,j;
	for(i=0; i<time; i++)
 80001f8:	2300      	movs	r3, #0
 80001fa:	60fb      	str	r3, [r7, #12]
 80001fc:	e00b      	b.n	8000216 <wait_ms+0x26>
		for(j=0;j<255;j++);
 80001fe:	2300      	movs	r3, #0
 8000200:	60bb      	str	r3, [r7, #8]
 8000202:	e002      	b.n	800020a <wait_ms+0x1a>
 8000204:	68bb      	ldr	r3, [r7, #8]
 8000206:	3301      	adds	r3, #1
 8000208:	60bb      	str	r3, [r7, #8]
 800020a:	68bb      	ldr	r3, [r7, #8]
 800020c:	2bfe      	cmp	r3, #254	; 0xfe
 800020e:	d9f9      	bls.n	8000204 <wait_ms+0x14>
	for(i=0; i<time; i++)
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	3301      	adds	r3, #1
 8000214:	60fb      	str	r3, [r7, #12]
 8000216:	68fa      	ldr	r2, [r7, #12]
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	429a      	cmp	r2, r3
 800021c:	d3ef      	bcc.n	80001fe <wait_ms+0xe>
}
 800021e:	bf00      	nop
 8000220:	3714      	adds	r7, #20
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr

08000228 <UART_IRQ_callback>:

volatile uint8_t  ch= '\0';
void UART_IRQ_callback(void)
{
 8000228:	b580      	push	{r7, lr}
 800022a:	af00      	add	r7, sp, #0
	MCAL_UART_ReceiveData(USART1, &ch ,disable );
 800022c:	2201      	movs	r2, #1
 800022e:	491a      	ldr	r1, [pc, #104]	; (8000298 <UART_IRQ_callback+0x70>)
 8000230:	481a      	ldr	r0, [pc, #104]	; (800029c <UART_IRQ_callback+0x74>)
 8000232:	f000 fbd7 	bl	80009e4 <MCAL_UART_ReceiveData>
	if(ch == 0xfd )
 8000236:	4b18      	ldr	r3, [pc, #96]	; (8000298 <UART_IRQ_callback+0x70>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	b2db      	uxtb	r3, r3
 800023c:	2bfd      	cmp	r3, #253	; 0xfd
 800023e:	d110      	bne.n	8000262 <UART_IRQ_callback+0x3a>
	{
		MCAL_GPIO_TogglePin (  GPIOA, GPIO_PIN_2 );
 8000240:	2104      	movs	r1, #4
 8000242:	4817      	ldr	r0, [pc, #92]	; (80002a0 <UART_IRQ_callback+0x78>)
 8000244:	f000 fd75 	bl	8000d32 <MCAL_GPIO_TogglePin>
		wait_ms(1000);
 8000248:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800024c:	f7ff ffd0 	bl	80001f0 <wait_ms>
		MCAL_GPIO_TogglePin (  GPIOA, GPIO_PIN_2 );
 8000250:	2104      	movs	r1, #4
 8000252:	4813      	ldr	r0, [pc, #76]	; (80002a0 <UART_IRQ_callback+0x78>)
 8000254:	f000 fd6d 	bl	8000d32 <MCAL_GPIO_TogglePin>
		wait_ms(1000);
 8000258:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800025c:	f7ff ffc8 	bl	80001f0 <wait_ms>
 8000260:	e014      	b.n	800028c <UART_IRQ_callback+0x64>
	}
	else if(ch == 0xfa)
 8000262:	4b0d      	ldr	r3, [pc, #52]	; (8000298 <UART_IRQ_callback+0x70>)
 8000264:	781b      	ldrb	r3, [r3, #0]
 8000266:	b2db      	uxtb	r3, r3
 8000268:	2bfa      	cmp	r3, #250	; 0xfa
 800026a:	d10f      	bne.n	800028c <UART_IRQ_callback+0x64>
	{
		MCAL_GPIO_TogglePin (  GPIOA, GPIO_PIN_5 );
 800026c:	2120      	movs	r1, #32
 800026e:	480c      	ldr	r0, [pc, #48]	; (80002a0 <UART_IRQ_callback+0x78>)
 8000270:	f000 fd5f 	bl	8000d32 <MCAL_GPIO_TogglePin>
		wait_ms(1000);
 8000274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000278:	f7ff ffba 	bl	80001f0 <wait_ms>
		MCAL_GPIO_TogglePin (  GPIOA, GPIO_PIN_5 );
 800027c:	2120      	movs	r1, #32
 800027e:	4808      	ldr	r0, [pc, #32]	; (80002a0 <UART_IRQ_callback+0x78>)
 8000280:	f000 fd57 	bl	8000d32 <MCAL_GPIO_TogglePin>
		wait_ms(1000);
 8000284:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000288:	f7ff ffb2 	bl	80001f0 <wait_ms>
	}
	ch= '\0';
 800028c:	4b02      	ldr	r3, [pc, #8]	; (8000298 <UART_IRQ_callback+0x70>)
 800028e:	2200      	movs	r2, #0
 8000290:	701a      	strb	r2, [r3, #0]

}
 8000292:	bf00      	nop
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	2000001c 	.word	0x2000001c
 800029c:	40013800 	.word	0x40013800
 80002a0:	40010800 	.word	0x40010800

080002a4 <main>:
int main(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b086      	sub	sp, #24
 80002a8:	af00      	add	r7, sp, #0
	UART_Config uartcfg;
	clock_init();
 80002aa:	f7ff ff61 	bl	8000170 <clock_init>
	LCD_INIT();
 80002ae:	f000 f931 	bl	8000514 <LCD_INIT>
	GPIO_init();
 80002b2:	f7ff ff7d 	bl	80001b0 <GPIO_init>
	uartcfg.BaudRate = UART_BaudRate_115200;
 80002b6:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80002ba:	60bb      	str	r3, [r7, #8]
	uartcfg.HwFlowCtl= UART_HwFlowCtl_NONE;
 80002bc:	2300      	movs	r3, #0
 80002be:	73fb      	strb	r3, [r7, #15]
	//uartcfg.IRQ_Enable = UART_IRQ_Enable_NONE;
	uartcfg.IRQ_Enable =UART_IRQ_Enable_RXNEIE;
 80002c0:	2320      	movs	r3, #32
 80002c2:	743b      	strb	r3, [r7, #16]
	uartcfg.P_IRQ_CallBack= &UART_IRQ_callback;
 80002c4:	4b09      	ldr	r3, [pc, #36]	; (80002ec <main+0x48>)
 80002c6:	617b      	str	r3, [r7, #20]
	//uartcfg.P_IRQ_CallBack=NULL;
	uartcfg.Parity = UART_Parity__NONE;
 80002c8:	2300      	movs	r3, #0
 80002ca:	737b      	strb	r3, [r7, #13]
	uartcfg.Payload_Length =UART_Payload_Length_8B;
 80002cc:	2300      	movs	r3, #0
 80002ce:	733b      	strb	r3, [r7, #12]
	uartcfg.StopBits =UART_StopBits__1;
 80002d0:	2300      	movs	r3, #0
 80002d2:	73bb      	strb	r3, [r7, #14]
	uartcfg.USART_Mode=UART_MODE_RX;
 80002d4:	2304      	movs	r3, #4
 80002d6:	713b      	strb	r3, [r7, #4]

	MCAL_UART_GPIO_Set_Pins(USART1);
 80002d8:	4805      	ldr	r0, [pc, #20]	; (80002f0 <main+0x4c>)
 80002da:	f000 fbaf 	bl	8000a3c <MCAL_UART_GPIO_Set_Pins>
	MCAL_UART_Init(USART1, &uartcfg);
 80002de:	1d3b      	adds	r3, r7, #4
 80002e0:	4619      	mov	r1, r3
 80002e2:	4803      	ldr	r0, [pc, #12]	; (80002f0 <main+0x4c>)
 80002e4:	f000 fabc 	bl	8000860 <MCAL_UART_Init>

	while(1)
 80002e8:	e7fe      	b.n	80002e8 <main+0x44>
 80002ea:	bf00      	nop
 80002ec:	08000229 	.word	0x08000229
 80002f0:	40013800 	.word	0x40013800

080002f4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002f4:	480d      	ldr	r0, [pc, #52]	; (800032c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002f6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002f8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002fc:	480c      	ldr	r0, [pc, #48]	; (8000330 <LoopForever+0x6>)
  ldr r1, =_edata
 80002fe:	490d      	ldr	r1, [pc, #52]	; (8000334 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000300:	4a0d      	ldr	r2, [pc, #52]	; (8000338 <LoopForever+0xe>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000304:	e002      	b.n	800030c <LoopCopyDataInit>

08000306 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000306:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000308:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800030a:	3304      	adds	r3, #4

0800030c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800030c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800030e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000310:	d3f9      	bcc.n	8000306 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000312:	4a0a      	ldr	r2, [pc, #40]	; (800033c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000314:	4c0a      	ldr	r4, [pc, #40]	; (8000340 <LoopForever+0x16>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000318:	e001      	b.n	800031e <LoopFillZerobss>

0800031a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800031a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800031c:	3204      	adds	r2, #4

0800031e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800031e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000320:	d3fb      	bcc.n	800031a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000322:	f000 fd17 	bl	8000d54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000326:	f7ff ffbd 	bl	80002a4 <main>

0800032a <LoopForever>:

LoopForever:
    b LoopForever
 800032a:	e7fe      	b.n	800032a <LoopForever>
  ldr   r0, =_estack
 800032c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000334:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000338:	08000dd4 	.word	0x08000dd4
  ldr r2, =_sbss
 800033c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000340:	20000064 	.word	0x20000064

08000344 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000344:	e7fe      	b.n	8000344 <ADC1_2_IRQHandler>

08000346 <delay_ms>:
 *  Author: Marco
 */

#include "lcd.h"

void delay_ms(uint32_t time) {
 8000346:	b480      	push	{r7}
 8000348:	b085      	sub	sp, #20
 800034a:	af00      	add	r7, sp, #0
 800034c:	6078      	str	r0, [r7, #4]
	uint32_t i, j;
	for (i = 0; i < time; i++)
 800034e:	2300      	movs	r3, #0
 8000350:	60fb      	str	r3, [r7, #12]
 8000352:	e00b      	b.n	800036c <delay_ms+0x26>
		for (j = 0; j < 255; j++)
 8000354:	2300      	movs	r3, #0
 8000356:	60bb      	str	r3, [r7, #8]
 8000358:	e002      	b.n	8000360 <delay_ms+0x1a>
 800035a:	68bb      	ldr	r3, [r7, #8]
 800035c:	3301      	adds	r3, #1
 800035e:	60bb      	str	r3, [r7, #8]
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	2bfe      	cmp	r3, #254	; 0xfe
 8000364:	d9f9      	bls.n	800035a <delay_ms+0x14>
	for (i = 0; i < time; i++)
 8000366:	68fb      	ldr	r3, [r7, #12]
 8000368:	3301      	adds	r3, #1
 800036a:	60fb      	str	r3, [r7, #12]
 800036c:	68fa      	ldr	r2, [r7, #12]
 800036e:	687b      	ldr	r3, [r7, #4]
 8000370:	429a      	cmp	r2, r3
 8000372:	d3ef      	bcc.n	8000354 <delay_ms+0xe>
			;
}
 8000374:	bf00      	nop
 8000376:	3714      	adds	r7, #20
 8000378:	46bd      	mov	sp, r7
 800037a:	bc80      	pop	{r7}
 800037c:	4770      	bx	lr
	...

08000380 <LCD_GPIO_init>:

void LCD_GPIO_init() {
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0

	PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000384:	4b52      	ldr	r3, [pc, #328]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800038a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800038c:	4b50      	ldr	r3, [pc, #320]	; (80004d0 <LCD_GPIO_init+0x150>)
 800038e:	2204      	movs	r2, #4
 8000390:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000392:	4b4f      	ldr	r3, [pc, #316]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000394:	2201      	movs	r2, #1
 8000396:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000398:	494d      	ldr	r1, [pc, #308]	; (80004d0 <LCD_GPIO_init+0x150>)
 800039a:	484e      	ldr	r0, [pc, #312]	; (80004d4 <LCD_GPIO_init+0x154>)
 800039c:	f000 fc25 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80003a0:	4b4b      	ldr	r3, [pc, #300]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003a8:	4b49      	ldr	r3, [pc, #292]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003aa:	2204      	movs	r2, #4
 80003ac:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003ae:	4b48      	ldr	r3, [pc, #288]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003b0:	2201      	movs	r2, #1
 80003b2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003b4:	4946      	ldr	r1, [pc, #280]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003b6:	4847      	ldr	r0, [pc, #284]	; (80004d4 <LCD_GPIO_init+0x154>)
 80003b8:	f000 fc17 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 80003bc:	4b44      	ldr	r3, [pc, #272]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80003c2:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003c4:	4b42      	ldr	r3, [pc, #264]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003c6:	2204      	movs	r2, #4
 80003c8:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003ca:	4b41      	ldr	r3, [pc, #260]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003cc:	2201      	movs	r2, #1
 80003ce:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80003d0:	493f      	ldr	r1, [pc, #252]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003d2:	4840      	ldr	r0, [pc, #256]	; (80004d4 <LCD_GPIO_init+0x154>)
 80003d4:	f000 fc09 	bl	8000bea <MCAL_GPIO_Init>

	//============================
	// SET THE NEXT 8 PINS AS INPUT
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 80003d8:	4b3d      	ldr	r3, [pc, #244]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003da:	2201      	movs	r2, #1
 80003dc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003de:	4b3c      	ldr	r3, [pc, #240]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003e0:	2204      	movs	r2, #4
 80003e2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003e4:	4b3a      	ldr	r3, [pc, #232]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003e6:	2201      	movs	r2, #1
 80003e8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80003ea:	4939      	ldr	r1, [pc, #228]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003ec:	4839      	ldr	r0, [pc, #228]	; (80004d4 <LCD_GPIO_init+0x154>)
 80003ee:	f000 fbfc 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 80003f2:	4b37      	ldr	r3, [pc, #220]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003f4:	2202      	movs	r2, #2
 80003f6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80003f8:	4b35      	ldr	r3, [pc, #212]	; (80004d0 <LCD_GPIO_init+0x150>)
 80003fa:	2204      	movs	r2, #4
 80003fc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 80003fe:	4b34      	ldr	r3, [pc, #208]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000400:	2201      	movs	r2, #1
 8000402:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000404:	4932      	ldr	r1, [pc, #200]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000406:	4833      	ldr	r0, [pc, #204]	; (80004d4 <LCD_GPIO_init+0x154>)
 8000408:	f000 fbef 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 800040c:	4b30      	ldr	r3, [pc, #192]	; (80004d0 <LCD_GPIO_init+0x150>)
 800040e:	2204      	movs	r2, #4
 8000410:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000412:	4b2f      	ldr	r3, [pc, #188]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000414:	2204      	movs	r2, #4
 8000416:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000418:	4b2d      	ldr	r3, [pc, #180]	; (80004d0 <LCD_GPIO_init+0x150>)
 800041a:	2201      	movs	r2, #1
 800041c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800041e:	492c      	ldr	r1, [pc, #176]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000420:	482c      	ldr	r0, [pc, #176]	; (80004d4 <LCD_GPIO_init+0x154>)
 8000422:	f000 fbe2 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000426:	4b2a      	ldr	r3, [pc, #168]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000428:	2208      	movs	r2, #8
 800042a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800042c:	4b28      	ldr	r3, [pc, #160]	; (80004d0 <LCD_GPIO_init+0x150>)
 800042e:	2204      	movs	r2, #4
 8000430:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000432:	4b27      	ldr	r3, [pc, #156]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000434:	2201      	movs	r2, #1
 8000436:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000438:	4925      	ldr	r1, [pc, #148]	; (80004d0 <LCD_GPIO_init+0x150>)
 800043a:	4826      	ldr	r0, [pc, #152]	; (80004d4 <LCD_GPIO_init+0x154>)
 800043c:	f000 fbd5 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000440:	4b23      	ldr	r3, [pc, #140]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000442:	2210      	movs	r2, #16
 8000444:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000446:	4b22      	ldr	r3, [pc, #136]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000448:	2204      	movs	r2, #4
 800044a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800044c:	4b20      	ldr	r3, [pc, #128]	; (80004d0 <LCD_GPIO_init+0x150>)
 800044e:	2201      	movs	r2, #1
 8000450:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000452:	491f      	ldr	r1, [pc, #124]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000454:	481f      	ldr	r0, [pc, #124]	; (80004d4 <LCD_GPIO_init+0x154>)
 8000456:	f000 fbc8 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 800045a:	4b1d      	ldr	r3, [pc, #116]	; (80004d0 <LCD_GPIO_init+0x150>)
 800045c:	2220      	movs	r2, #32
 800045e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000460:	4b1b      	ldr	r3, [pc, #108]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000462:	2204      	movs	r2, #4
 8000464:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000466:	4b1a      	ldr	r3, [pc, #104]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000468:	2201      	movs	r2, #1
 800046a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800046c:	4918      	ldr	r1, [pc, #96]	; (80004d0 <LCD_GPIO_init+0x150>)
 800046e:	4819      	ldr	r0, [pc, #100]	; (80004d4 <LCD_GPIO_init+0x154>)
 8000470:	f000 fbbb 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000474:	4b16      	ldr	r3, [pc, #88]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000476:	2240      	movs	r2, #64	; 0x40
 8000478:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800047a:	4b15      	ldr	r3, [pc, #84]	; (80004d0 <LCD_GPIO_init+0x150>)
 800047c:	2204      	movs	r2, #4
 800047e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000482:	2201      	movs	r2, #1
 8000484:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000486:	4912      	ldr	r1, [pc, #72]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000488:	4812      	ldr	r0, [pc, #72]	; (80004d4 <LCD_GPIO_init+0x154>)
 800048a:	f000 fbae 	bl	8000bea <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000490:	2280      	movs	r2, #128	; 0x80
 8000492:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000494:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <LCD_GPIO_init+0x150>)
 8000496:	2204      	movs	r2, #4
 8000498:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10M;
 800049a:	4b0d      	ldr	r3, [pc, #52]	; (80004d0 <LCD_GPIO_init+0x150>)
 800049c:	2201      	movs	r2, #1
 800049e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80004a0:	490b      	ldr	r1, [pc, #44]	; (80004d0 <LCD_GPIO_init+0x150>)
 80004a2:	480c      	ldr	r0, [pc, #48]	; (80004d4 <LCD_GPIO_init+0x154>)
 80004a4:	f000 fba1 	bl	8000bea <MCAL_GPIO_Init>

	//	DataDir_LCD_CTRL |= (1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004ae:	4809      	ldr	r0, [pc, #36]	; (80004d4 <LCD_GPIO_init+0x154>)
 80004b0:	f000 fc1a 	bl	8000ce8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 80004b4:	2200      	movs	r2, #0
 80004b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004ba:	4806      	ldr	r0, [pc, #24]	; (80004d4 <LCD_GPIO_init+0x154>)
 80004bc:	f000 fc14 	bl	8000ce8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 80004c0:	2200      	movs	r2, #0
 80004c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004c6:	4803      	ldr	r0, [pc, #12]	; (80004d4 <LCD_GPIO_init+0x154>)
 80004c8:	f000 fc0e 	bl	8000ce8 <MCAL_GPIO_WritePin>

}
 80004cc:	bf00      	nop
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	20000024 	.word	0x20000024
 80004d4:	40010c00 	.word	0x40010c00

080004d8 <LCD_clear_screen>:

void LCD_clear_screen() {
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 80004dc:	2001      	movs	r0, #1
 80004de:	f000 f833 	bl	8000548 <LCD_WRITE_COMMAND>
}
 80004e2:	bf00      	nop
 80004e4:	bd80      	pop	{r7, pc}
	...

080004e8 <LCD_lcd_kick>:

void LCD_lcd_kick() {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80004f2:	4807      	ldr	r0, [pc, #28]	; (8000510 <LCD_lcd_kick+0x28>)
 80004f4:	f000 fbf8 	bl	8000ce8 <MCAL_GPIO_WritePin>
	delay_ms(50);
 80004f8:	2032      	movs	r0, #50	; 0x32
 80004fa:	f7ff ff24 	bl	8000346 <delay_ms>
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <LCD_lcd_kick+0x28>)
 8000506:	f000 fbef 	bl	8000ce8 <MCAL_GPIO_WritePin>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40010c00 	.word	0x40010c00

08000514 <LCD_INIT>:
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
		}
	}
}

void LCD_INIT() {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

	delay_ms(20);
 8000518:	2014      	movs	r0, #20
 800051a:	f7ff ff14 	bl	8000346 <delay_ms>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 800051e:	f7ff ff2f 	bl	8000380 <LCD_GPIO_init>
	//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
	//	DataDir_LCD_PORT = 0xFF;
	delay_ms(15);
 8000522:	200f      	movs	r0, #15
 8000524:	f7ff ff0f 	bl	8000346 <delay_ms>

	LCD_clear_screen();
 8000528:	f7ff ffd6 	bl	80004d8 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 800052c:	2038      	movs	r0, #56	; 0x38
 800052e:	f000 f80b 	bl	8000548 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 8000532:	2006      	movs	r0, #6
 8000534:	f000 f808 	bl	8000548 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 8000538:	2080      	movs	r0, #128	; 0x80
 800053a:	f000 f805 	bl	8000548 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 800053e:	200f      	movs	r0, #15
 8000540:	f000 f802 	bl	8000548 <LCD_WRITE_COMMAND>
}
 8000544:	bf00      	nop
 8000546:	bd80      	pop	{r7, pc}

08000548 <LCD_WRITE_COMMAND>:
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
	//	LCD_CTRL &= ~(1 << RW_SWITCH);

}

void LCD_WRITE_COMMAND(unsigned char command) {
 8000548:	b580      	push	{r7, lr}
 800054a:	b082      	sub	sp, #8
 800054c:	af00      	add	r7, sp, #0
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	//LCD_check_lcd_isbusy();
	MCAL_GPIO_WritePort(LCD_PORT, command);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	4619      	mov	r1, r3
 8000556:	480c      	ldr	r0, [pc, #48]	; (8000588 <LCD_WRITE_COMMAND+0x40>)
 8000558:	f000 fbdd 	bl	8000d16 <MCAL_GPIO_WritePort>
	//	LCD_CTRL->BRR = (LCD_CTRL->BRR & 0x00FF) | (command);
	//	LCD_CTRL->CRL ^= (LCD_CTRL->CRL ^ command) & 0x00ff;
	//	LCD_CTRL->CRL = command;
	//	LCD_CTRL ^= (LCD_CTRL-> ^ command) & 0x00ff;
	MCAL_GPIO_WritePin(LCD_CTRL, RW_SWITCH, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000562:	4809      	ldr	r0, [pc, #36]	; (8000588 <LCD_WRITE_COMMAND+0x40>)
 8000564:	f000 fbc0 	bl	8000ce8 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_CTRL, RS_SWITCH, GPIO_PIN_RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800056e:	4806      	ldr	r0, [pc, #24]	; (8000588 <LCD_WRITE_COMMAND+0x40>)
 8000570:	f000 fbba 	bl	8000ce8 <MCAL_GPIO_WritePin>
	//	LCD_CTRL &= ~((1 << RS_SWITCH) | (1<<RW_SWITCH));
	delay_ms(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f7ff fee6 	bl	8000346 <delay_ms>
	LCD_lcd_kick();
 800057a:	f7ff ffb5 	bl	80004e8 <LCD_lcd_kick>

}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40010c00 	.word	0x40010c00

0800058c <EXTI0_IRQHandler>:
//     ISR Function
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*


void EXTI0_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit
	EXTI->PR |=1<<0;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <EXTI0_IRQHandler+0x1c>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <EXTI0_IRQHandler+0x1c>)
 8000596:	f043 0301 	orr.w	r3, r3, #1
 800059a:	6153      	str	r3, [r2, #20]
	// call IRQ
	GP_IRQ_CallBack[0]();
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <EXTI0_IRQHandler+0x20>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4798      	blx	r3
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010400 	.word	0x40010400
 80005ac:	20000028 	.word	0x20000028

080005b0 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler (void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit
	EXTI->PR |=1<<1;
 80005b4:	4b05      	ldr	r3, [pc, #20]	; (80005cc <EXTI1_IRQHandler+0x1c>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <EXTI1_IRQHandler+0x1c>)
 80005ba:	f043 0302 	orr.w	r3, r3, #2
 80005be:	6153      	str	r3, [r2, #20]
	// call IRQ
	GP_IRQ_CallBack[1]();
 80005c0:	4b03      	ldr	r3, [pc, #12]	; (80005d0 <EXTI1_IRQHandler+0x20>)
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	4798      	blx	r3
}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	40010400 	.word	0x40010400
 80005d0:	20000028 	.word	0x20000028

080005d4 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler (void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit
	EXTI->PR |=1<<2;
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <EXTI2_IRQHandler+0x1c>)
 80005da:	695b      	ldr	r3, [r3, #20]
 80005dc:	4a04      	ldr	r2, [pc, #16]	; (80005f0 <EXTI2_IRQHandler+0x1c>)
 80005de:	f043 0304 	orr.w	r3, r3, #4
 80005e2:	6153      	str	r3, [r2, #20]
	// call IRQ
	GP_IRQ_CallBack[2]();
 80005e4:	4b03      	ldr	r3, [pc, #12]	; (80005f4 <EXTI2_IRQHandler+0x20>)
 80005e6:	689b      	ldr	r3, [r3, #8]
 80005e8:	4798      	blx	r3
}
 80005ea:	bf00      	nop
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	bf00      	nop
 80005f0:	40010400 	.word	0x40010400
 80005f4:	20000028 	.word	0x20000028

080005f8 <EXTI3_IRQHandler>:
void EXTI3_IRQHandler(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit
	EXTI->PR |=1<<3;
 80005fc:	4b05      	ldr	r3, [pc, #20]	; (8000614 <EXTI3_IRQHandler+0x1c>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <EXTI3_IRQHandler+0x1c>)
 8000602:	f043 0308 	orr.w	r3, r3, #8
 8000606:	6153      	str	r3, [r2, #20]
	// call IRQ
	GP_IRQ_CallBack[3]();
 8000608:	4b03      	ldr	r3, [pc, #12]	; (8000618 <EXTI3_IRQHandler+0x20>)
 800060a:	68db      	ldr	r3, [r3, #12]
 800060c:	4798      	blx	r3
}
 800060e:	bf00      	nop
 8000610:	bd80      	pop	{r7, pc}
 8000612:	bf00      	nop
 8000614:	40010400 	.word	0x40010400
 8000618:	20000028 	.word	0x20000028

0800061c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	//clear by writing '1' into the bit
	EXTI->PR |=1<<4;
 8000620:	4b05      	ldr	r3, [pc, #20]	; (8000638 <EXTI4_IRQHandler+0x1c>)
 8000622:	695b      	ldr	r3, [r3, #20]
 8000624:	4a04      	ldr	r2, [pc, #16]	; (8000638 <EXTI4_IRQHandler+0x1c>)
 8000626:	f043 0310 	orr.w	r3, r3, #16
 800062a:	6153      	str	r3, [r2, #20]
	// call IRQ
	GP_IRQ_CallBack[4]();
 800062c:	4b03      	ldr	r3, [pc, #12]	; (800063c <EXTI4_IRQHandler+0x20>)
 800062e:	691b      	ldr	r3, [r3, #16]
 8000630:	4798      	blx	r3
}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	40010400 	.word	0x40010400
 800063c:	20000028 	.word	0x20000028

08000640 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0

	if( EXTI->PR & 1<<5  ) { EXTI->PR |= (1<<5); GP_IRQ_CallBack[5](); }
 8000644:	4b26      	ldr	r3, [pc, #152]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 8000646:	695b      	ldr	r3, [r3, #20]
 8000648:	f003 0320 	and.w	r3, r3, #32
 800064c:	2b00      	cmp	r3, #0
 800064e:	d008      	beq.n	8000662 <EXTI9_5_IRQHandler+0x22>
 8000650:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 8000652:	695b      	ldr	r3, [r3, #20]
 8000654:	4a22      	ldr	r2, [pc, #136]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 8000656:	f043 0320 	orr.w	r3, r3, #32
 800065a:	6153      	str	r3, [r2, #20]
 800065c:	4b21      	ldr	r3, [pc, #132]	; (80006e4 <EXTI9_5_IRQHandler+0xa4>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	4798      	blx	r3
	if( EXTI->PR & 1<<6  ) { EXTI->PR |= (1<<6); GP_IRQ_CallBack[6](); }
 8000662:	4b1f      	ldr	r3, [pc, #124]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800066a:	2b00      	cmp	r3, #0
 800066c:	d008      	beq.n	8000680 <EXTI9_5_IRQHandler+0x40>
 800066e:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a1b      	ldr	r2, [pc, #108]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 8000674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b1a      	ldr	r3, [pc, #104]	; (80006e4 <EXTI9_5_IRQHandler+0xa4>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	4798      	blx	r3
	if( EXTI->PR & 1<<7  ) { EXTI->PR |= (1<<7); GP_IRQ_CallBack[7](); }
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 8000682:	695b      	ldr	r3, [r3, #20]
 8000684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000688:	2b00      	cmp	r3, #0
 800068a:	d008      	beq.n	800069e <EXTI9_5_IRQHandler+0x5e>
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 800068e:	695b      	ldr	r3, [r3, #20]
 8000690:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 8000692:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000696:	6153      	str	r3, [r2, #20]
 8000698:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <EXTI9_5_IRQHandler+0xa4>)
 800069a:	69db      	ldr	r3, [r3, #28]
 800069c:	4798      	blx	r3
	if( EXTI->PR & 1<<8  ) { EXTI->PR |= (1<<8); GP_IRQ_CallBack[8](); }
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 80006a0:	695b      	ldr	r3, [r3, #20]
 80006a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d008      	beq.n	80006bc <EXTI9_5_IRQHandler+0x7c>
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	4a0c      	ldr	r2, [pc, #48]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 80006b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b4:	6153      	str	r3, [r2, #20]
 80006b6:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <EXTI9_5_IRQHandler+0xa4>)
 80006b8:	6a1b      	ldr	r3, [r3, #32]
 80006ba:	4798      	blx	r3
	if( EXTI->PR & 1<<9  ) { EXTI->PR |= (1<<9); GP_IRQ_CallBack[9](); }
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 80006be:	695b      	ldr	r3, [r3, #20]
 80006c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d008      	beq.n	80006da <EXTI9_5_IRQHandler+0x9a>
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 80006ca:	695b      	ldr	r3, [r3, #20]
 80006cc:	4a04      	ldr	r2, [pc, #16]	; (80006e0 <EXTI9_5_IRQHandler+0xa0>)
 80006ce:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80006d2:	6153      	str	r3, [r2, #20]
 80006d4:	4b03      	ldr	r3, [pc, #12]	; (80006e4 <EXTI9_5_IRQHandler+0xa4>)
 80006d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006d8:	4798      	blx	r3
}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40010400 	.word	0x40010400
 80006e4:	20000028 	.word	0x20000028

080006e8 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
	if( EXTI->PR & 1<<10  ) { EXTI->PR |= (1<<10); GP_IRQ_CallBack[10](); }
 80006ec:	4b2d      	ldr	r3, [pc, #180]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 80006ee:	695b      	ldr	r3, [r3, #20]
 80006f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d008      	beq.n	800070a <EXTI15_10_IRQHandler+0x22>
 80006f8:	4b2a      	ldr	r3, [pc, #168]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 80006fa:	695b      	ldr	r3, [r3, #20]
 80006fc:	4a29      	ldr	r2, [pc, #164]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 80006fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000702:	6153      	str	r3, [r2, #20]
 8000704:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <EXTI15_10_IRQHandler+0xc0>)
 8000706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000708:	4798      	blx	r3
	if( EXTI->PR & 1<<11  ) { EXTI->PR |= (1<<11); GP_IRQ_CallBack[11](); }
 800070a:	4b26      	ldr	r3, [pc, #152]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000712:	2b00      	cmp	r3, #0
 8000714:	d008      	beq.n	8000728 <EXTI15_10_IRQHandler+0x40>
 8000716:	4b23      	ldr	r3, [pc, #140]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 8000718:	695b      	ldr	r3, [r3, #20]
 800071a:	4a22      	ldr	r2, [pc, #136]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 800071c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000720:	6153      	str	r3, [r2, #20]
 8000722:	4b21      	ldr	r3, [pc, #132]	; (80007a8 <EXTI15_10_IRQHandler+0xc0>)
 8000724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000726:	4798      	blx	r3
	if( EXTI->PR & 1<<12  ) { EXTI->PR |= (1<<12); GP_IRQ_CallBack[12](); }
 8000728:	4b1e      	ldr	r3, [pc, #120]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 800072a:	695b      	ldr	r3, [r3, #20]
 800072c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000730:	2b00      	cmp	r3, #0
 8000732:	d008      	beq.n	8000746 <EXTI15_10_IRQHandler+0x5e>
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	4a1a      	ldr	r2, [pc, #104]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 800073a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800073e:	6153      	str	r3, [r2, #20]
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <EXTI15_10_IRQHandler+0xc0>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000744:	4798      	blx	r3
	if( EXTI->PR & 1<<13  ) { EXTI->PR |= (1<<13); GP_IRQ_CallBack[13](); }
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 8000748:	695b      	ldr	r3, [r3, #20]
 800074a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800074e:	2b00      	cmp	r3, #0
 8000750:	d008      	beq.n	8000764 <EXTI15_10_IRQHandler+0x7c>
 8000752:	4b14      	ldr	r3, [pc, #80]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 8000754:	695b      	ldr	r3, [r3, #20]
 8000756:	4a13      	ldr	r2, [pc, #76]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 8000758:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800075c:	6153      	str	r3, [r2, #20]
 800075e:	4b12      	ldr	r3, [pc, #72]	; (80007a8 <EXTI15_10_IRQHandler+0xc0>)
 8000760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000762:	4798      	blx	r3
	if( EXTI->PR & 1<<14  ) { EXTI->PR |= (1<<14); GP_IRQ_CallBack[14](); }
 8000764:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 8000766:	695b      	ldr	r3, [r3, #20]
 8000768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076c:	2b00      	cmp	r3, #0
 800076e:	d008      	beq.n	8000782 <EXTI15_10_IRQHandler+0x9a>
 8000770:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	4a0b      	ldr	r2, [pc, #44]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 8000776:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800077a:	6153      	str	r3, [r2, #20]
 800077c:	4b0a      	ldr	r3, [pc, #40]	; (80007a8 <EXTI15_10_IRQHandler+0xc0>)
 800077e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000780:	4798      	blx	r3
	if( EXTI->PR & 1<<15  ) { EXTI->PR |= (1<<15); GP_IRQ_CallBack[15](); }
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 8000784:	695b      	ldr	r3, [r3, #20]
 8000786:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800078a:	2b00      	cmp	r3, #0
 800078c:	d008      	beq.n	80007a0 <EXTI15_10_IRQHandler+0xb8>
 800078e:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	4a04      	ldr	r2, [pc, #16]	; (80007a4 <EXTI15_10_IRQHandler+0xbc>)
 8000794:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000798:	6153      	str	r3, [r2, #20]
 800079a:	4b03      	ldr	r3, [pc, #12]	; (80007a8 <EXTI15_10_IRQHandler+0xc0>)
 800079c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800079e:	4798      	blx	r3
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	40010400 	.word	0x40010400
 80007a8:	20000028 	.word	0x20000028

080007ac <MCAL_RCC_GetSYS_CLK2Freq>:
//     APIs Functions Definitions
//-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*


uint32_t MCAL_RCC_GetSYS_CLK2Freq( void )
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
	//	00: HSI oscillator used as system clock
	//	01: HSE oscillator used as system clock
	//	10: PLL used as system clock
	//	11: not applicable

	switch(RCC->CFGR >> 2 & 0b11)
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <MCAL_RCC_GetSYS_CLK2Freq+0x30>)
 80007b2:	685b      	ldr	r3, [r3, #4]
 80007b4:	089b      	lsrs	r3, r3, #2
 80007b6:	f003 0303 	and.w	r3, r3, #3
 80007ba:	2b01      	cmp	r3, #1
 80007bc:	d006      	beq.n	80007cc <MCAL_RCC_GetSYS_CLK2Freq+0x20>
 80007be:	2b01      	cmp	r3, #1
 80007c0:	d302      	bcc.n	80007c8 <MCAL_RCC_GetSYS_CLK2Freq+0x1c>
 80007c2:	2b02      	cmp	r3, #2
 80007c4:	d004      	beq.n	80007d0 <MCAL_RCC_GetSYS_CLK2Freq+0x24>
 80007c6:	e005      	b.n	80007d4 <MCAL_RCC_GetSYS_CLK2Freq+0x28>
	{
	case 0:
		return HSI_RC_CLK ;
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <MCAL_RCC_GetSYS_CLK2Freq+0x34>)
 80007ca:	e003      	b.n	80007d4 <MCAL_RCC_GetSYS_CLK2Freq+0x28>
		break;

	case 1:
		return HSE_RC_CLK;
 80007cc:	4b05      	ldr	r3, [pc, #20]	; (80007e4 <MCAL_RCC_GetSYS_CLK2Freq+0x38>)
 80007ce:	e001      	b.n	80007d4 <MCAL_RCC_GetSYS_CLK2Freq+0x28>
		break;
	case 2:
		return 16000000;
 80007d0:	4b03      	ldr	r3, [pc, #12]	; (80007e0 <MCAL_RCC_GetSYS_CLK2Freq+0x34>)
 80007d2:	e7ff      	b.n	80007d4 <MCAL_RCC_GetSYS_CLK2Freq+0x28>
		break;

	}


}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	40021000 	.word	0x40021000
 80007e0:	00f42400 	.word	0x00f42400
 80007e4:	007a1200 	.word	0x007a1200

080007e8 <MCAL_RCC_GetHCLKFreq>:
uint32_t MCAL_RCC_GetHCLKFreq( void )
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
	//HPRE: AHB prescaler
	return (MCAL_RCC_GetSYS_CLK2Freq( ) >> AHBPrescTable[ (RCC->CFGR >> 4) & 0xf] ) ;
 80007ec:	f7ff ffde 	bl	80007ac <MCAL_RCC_GetSYS_CLK2Freq>
 80007f0:	4601      	mov	r1, r0
 80007f2:	4b05      	ldr	r3, [pc, #20]	; (8000808 <MCAL_RCC_GetHCLKFreq+0x20>)
 80007f4:	685b      	ldr	r3, [r3, #4]
 80007f6:	091b      	lsrs	r3, r3, #4
 80007f8:	f003 030f 	and.w	r3, r3, #15
 80007fc:	4a03      	ldr	r2, [pc, #12]	; (800080c <MCAL_RCC_GetHCLKFreq+0x24>)
 80007fe:	5cd3      	ldrb	r3, [r2, r3]
 8000800:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000804:	4618      	mov	r0, r3
 8000806:	bd80      	pop	{r7, pc}
 8000808:	40021000 	.word	0x40021000
 800080c:	08000dbc 	.word	0x08000dbc

08000810 <MCAL_RCC_GetPCLK1Freq>:
uint32_t MCAL_RCC_GetPCLK1Freq( void )
{
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0

	return (MCAL_RCC_GetHCLKFreq( ) >> APBPrescTable[ (RCC->CFGR >> 8) & 0b111] ) ;
 8000814:	f7ff ffe8 	bl	80007e8 <MCAL_RCC_GetHCLKFreq>
 8000818:	4601      	mov	r1, r0
 800081a:	4b05      	ldr	r3, [pc, #20]	; (8000830 <MCAL_RCC_GetPCLK1Freq+0x20>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	0a1b      	lsrs	r3, r3, #8
 8000820:	f003 0307 	and.w	r3, r3, #7
 8000824:	4a03      	ldr	r2, [pc, #12]	; (8000834 <MCAL_RCC_GetPCLK1Freq+0x24>)
 8000826:	5cd3      	ldrb	r3, [r2, r3]
 8000828:	fa21 f303 	lsr.w	r3, r1, r3

}
 800082c:	4618      	mov	r0, r3
 800082e:	bd80      	pop	{r7, pc}
 8000830:	40021000 	.word	0x40021000
 8000834:	08000db4 	.word	0x08000db4

08000838 <MCAL_RCC_GetPCLK2Freq>:
uint32_t MCAL_RCC_GetPCLK2Freq( void )
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0

	return (MCAL_RCC_GetHCLKFreq( ) >> APBPrescTable[ (RCC->CFGR >> 11) & 0b111] ) ;
 800083c:	f7ff ffd4 	bl	80007e8 <MCAL_RCC_GetHCLKFreq>
 8000840:	4601      	mov	r1, r0
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <MCAL_RCC_GetPCLK2Freq+0x20>)
 8000844:	685b      	ldr	r3, [r3, #4]
 8000846:	0adb      	lsrs	r3, r3, #11
 8000848:	f003 0307 	and.w	r3, r3, #7
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <MCAL_RCC_GetPCLK2Freq+0x24>)
 800084e:	5cd3      	ldrb	r3, [r2, r3]
 8000850:	fa21 f303 	lsr.w	r3, r1, r3

}
 8000854:	4618      	mov	r0, r3
 8000856:	bd80      	pop	{r7, pc}
 8000858:	40021000 	.word	0x40021000
 800085c:	08000db4 	.word	0x08000db4

08000860 <MCAL_UART_Init>:
 * @param [in] 		- UART_Config: All UART Configuration EXTI_PinConfig_t
 * @retval 			-none
 * Note				-Support for Now Asynch mode & Clock 8 MHZ S
 */
void MCAL_UART_Init (USART_TypeDef *USARTx, UART_Config* UART_Config)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	6039      	str	r1, [r7, #0]
	Global_UART_Config = UART_Config ;
 800086a:	4a57      	ldr	r2, [pc, #348]	; (80009c8 <MCAL_UART_Init+0x168>)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	6013      	str	r3, [r2, #0]
	uint32_t pclk ,BRR  ;
	//	enable the Clock for given USART peripheral

	if ( USARTx == USART1 )
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	4a56      	ldr	r2, [pc, #344]	; (80009cc <MCAL_UART_Init+0x16c>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d106      	bne.n	8000886 <MCAL_UART_Init+0x26>
		RCC_USART1_CLK_EN();
 8000878:	4b55      	ldr	r3, [pc, #340]	; (80009d0 <MCAL_UART_Init+0x170>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a54      	ldr	r2, [pc, #336]	; (80009d0 <MCAL_UART_Init+0x170>)
 800087e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	e014      	b.n	80008b0 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART2 )
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4a52      	ldr	r2, [pc, #328]	; (80009d4 <MCAL_UART_Init+0x174>)
 800088a:	4293      	cmp	r3, r2
 800088c:	d106      	bne.n	800089c <MCAL_UART_Init+0x3c>
		RCC_USART2_CLK_EN();
 800088e:	4b50      	ldr	r3, [pc, #320]	; (80009d0 <MCAL_UART_Init+0x170>)
 8000890:	69db      	ldr	r3, [r3, #28]
 8000892:	4a4f      	ldr	r2, [pc, #316]	; (80009d0 <MCAL_UART_Init+0x170>)
 8000894:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000898:	61d3      	str	r3, [r2, #28]
 800089a:	e009      	b.n	80008b0 <MCAL_UART_Init+0x50>

	else if ( USARTx == USART3 )
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4a4e      	ldr	r2, [pc, #312]	; (80009d8 <MCAL_UART_Init+0x178>)
 80008a0:	4293      	cmp	r3, r2
 80008a2:	d105      	bne.n	80008b0 <MCAL_UART_Init+0x50>
		RCC_USART3_CLK_EN();
 80008a4:	4b4a      	ldr	r3, [pc, #296]	; (80009d0 <MCAL_UART_Init+0x170>)
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	4a49      	ldr	r2, [pc, #292]	; (80009d0 <MCAL_UART_Init+0x170>)
 80008aa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008ae:	61d3      	str	r3, [r2, #28]



	//Enable USART Module
	//	USART_CR1  Bit 13 UE: USART enable
	USARTx->CR1 |= 1<<13 ;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68db      	ldr	r3, [r3, #12]
 80008b4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	60da      	str	r2, [r3, #12]

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	//	USART_CR1 Bit 3 TE: Transmitter enable & Bit 2 RE: Receiver enable
	USARTx->CR1 |= UART_Config->USART_Mode ;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	683a      	ldr	r2, [r7, #0]
 80008c2:	7812      	ldrb	r2, [r2, #0]
 80008c4:	431a      	orrs	r2, r3
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60da      	str	r2, [r3, #12]

	//PAYLOAD Width
	// USARTx->CR1  Bit 12 M: Word length
	USARTx->CR1 |= UART_Config->Payload_Length ;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	68db      	ldr	r3, [r3, #12]
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	7a12      	ldrb	r2, [r2, #8]
 80008d2:	431a      	orrs	r2, r3
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	60da      	str	r2, [r3, #12]

	//Configuration of parity control bit fields
	// USARTx->CR1 	Bit 10 PCE: Parity control enable     Bit 9 PS: Parity selection
	USARTx->CR1 |= UART_Config->Parity ;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	68db      	ldr	r3, [r3, #12]
 80008dc:	683a      	ldr	r2, [r7, #0]
 80008de:	7a52      	ldrb	r2, [r2, #9]
 80008e0:	431a      	orrs	r2, r3
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	60da      	str	r2, [r3, #12]

	//configure the number of stop bits
	//USART_CR2  Bits 13:12 STOP: STOP bits
	USARTx->CR2 |= UART_Config->StopBits ;
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	691b      	ldr	r3, [r3, #16]
 80008ea:	683a      	ldr	r2, [r7, #0]
 80008ec:	7a92      	ldrb	r2, [r2, #10]
 80008ee:	431a      	orrs	r2, r3
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	611a      	str	r2, [r3, #16]


	//USART hardware flow control
	//USART_CR3  Bit 9 CTSE: CTS enable   Bit 8 RTSE: RTS enable
	USARTx->CR3 |= UART_Config->HwFlowCtl ;
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	695b      	ldr	r3, [r3, #20]
 80008f8:	683a      	ldr	r2, [r7, #0]
 80008fa:	7ad2      	ldrb	r2, [r2, #11]
 80008fc:	431a      	orrs	r2, r3
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	615a      	str	r2, [r3, #20]


	//Configuration of BRR(Baudrate register)
	//PCLK1 for USART2, 3
	//PCLK2 for USART1
	if ( USARTx == USART1 )
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a31      	ldr	r2, [pc, #196]	; (80009cc <MCAL_UART_Init+0x16c>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d103      	bne.n	8000912 <MCAL_UART_Init+0xb2>
	{
		pclk = MCAL_RCC_GetPCLK2Freq();
 800090a:	f7ff ff95 	bl	8000838 <MCAL_RCC_GetPCLK2Freq>
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	e002      	b.n	8000918 <MCAL_UART_Init+0xb8>
	}
	else
	{
		pclk = MCAL_RCC_GetPCLK1Freq();
 8000912:	f7ff ff7d 	bl	8000810 <MCAL_RCC_GetPCLK1Freq>
 8000916:	60f8      	str	r0, [r7, #12]
	}

	BRR = UART_BRR_Register(pclk, UART_Config->BaudRate) ;
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	685b      	ldr	r3, [r3, #4]
 800091c:	011b      	lsls	r3, r3, #4
 800091e:	68fa      	ldr	r2, [r7, #12]
 8000920:	fbb2 f3f3 	udiv	r3, r2, r3
 8000924:	0119      	lsls	r1, r3, #4
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	4613      	mov	r3, r2
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	4413      	add	r3, r2
 800092e:	009a      	lsls	r2, r3, #2
 8000930:	441a      	add	r2, r3
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	685b      	ldr	r3, [r3, #4]
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	fbb2 f2f3 	udiv	r2, r2, r3
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	685b      	ldr	r3, [r3, #4]
 8000940:	011b      	lsls	r3, r3, #4
 8000942:	68f8      	ldr	r0, [r7, #12]
 8000944:	fbb0 f3f3 	udiv	r3, r0, r3
 8000948:	2064      	movs	r0, #100	; 0x64
 800094a:	fb00 f303 	mul.w	r3, r0, r3
 800094e:	1ad3      	subs	r3, r2, r3
 8000950:	011b      	lsls	r3, r3, #4
 8000952:	4a22      	ldr	r2, [pc, #136]	; (80009dc <MCAL_UART_Init+0x17c>)
 8000954:	fba2 2303 	umull	r2, r3, r2, r3
 8000958:	095b      	lsrs	r3, r3, #5
 800095a:	f003 030f 	and.w	r3, r3, #15
 800095e:	430b      	orrs	r3, r1
 8000960:	60bb      	str	r3, [r7, #8]

	USARTx->BRR = BRR ;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	68ba      	ldr	r2, [r7, #8]
 8000966:	609a      	str	r2, [r3, #8]


	// ENABLE / DISABLE Interrupt
	//USART_CR1
	if (UART_Config->IRQ_Enable  != UART_IRQ_Enable_NONE)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	7b1b      	ldrb	r3, [r3, #12]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d026      	beq.n	80009be <MCAL_UART_Init+0x15e>
	{
		USARTx->CR1 |= (UART_Config->IRQ_Enable) ;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68db      	ldr	r3, [r3, #12]
 8000974:	683a      	ldr	r2, [r7, #0]
 8000976:	7b12      	ldrb	r2, [r2, #12]
 8000978:	431a      	orrs	r2, r3
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	60da      	str	r2, [r3, #12]
		//		Enable NVIC For USARTx IRQ
		if ( USARTx == USART1 )
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4a12      	ldr	r2, [pc, #72]	; (80009cc <MCAL_UART_Init+0x16c>)
 8000982:	4293      	cmp	r3, r2
 8000984:	d106      	bne.n	8000994 <MCAL_UART_Init+0x134>
			NVIC_IRQ37_USART1_Enable ;
 8000986:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MCAL_UART_Init+0x180>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4a15      	ldr	r2, [pc, #84]	; (80009e0 <MCAL_UART_Init+0x180>)
 800098c:	f043 0320 	orr.w	r3, r3, #32
 8000990:	6013      	str	r3, [r2, #0]

		else if ( USARTx == USART3 )
			NVIC_IRQ39_USART3_Enable ;
	}

}
 8000992:	e014      	b.n	80009be <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART2 )
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	4a0f      	ldr	r2, [pc, #60]	; (80009d4 <MCAL_UART_Init+0x174>)
 8000998:	4293      	cmp	r3, r2
 800099a:	d106      	bne.n	80009aa <MCAL_UART_Init+0x14a>
			NVIC_IRQ38_USART2_Enable ;
 800099c:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MCAL_UART_Init+0x180>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <MCAL_UART_Init+0x180>)
 80009a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80009a6:	6013      	str	r3, [r2, #0]
}
 80009a8:	e009      	b.n	80009be <MCAL_UART_Init+0x15e>
		else if ( USARTx == USART3 )
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a0a      	ldr	r2, [pc, #40]	; (80009d8 <MCAL_UART_Init+0x178>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d105      	bne.n	80009be <MCAL_UART_Init+0x15e>
			NVIC_IRQ39_USART3_Enable ;
 80009b2:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MCAL_UART_Init+0x180>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	4a0a      	ldr	r2, [pc, #40]	; (80009e0 <MCAL_UART_Init+0x180>)
 80009b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009bc:	6013      	str	r3, [r2, #0]
}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000020 	.word	0x20000020
 80009cc:	40013800 	.word	0x40013800
 80009d0:	40021000 	.word	0x40021000
 80009d4:	40004400 	.word	0x40004400
 80009d8:	40004800 	.word	0x40004800
 80009dc:	51eb851f 	.word	0x51eb851f
 80009e0:	e000e104 	.word	0xe000e104

080009e4 <MCAL_UART_ReceiveData>:
}



void MCAL_UART_ReceiveData	(USART_TypeDef *USARTx, uint8_t *pRxBuffer ,enum Polling_mechism PollingEn )
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	4613      	mov	r3, r2
 80009f0:	71fb      	strb	r3, [r7, #7]
	//Loop over until "Len" number of bytes are transferred
	//wait until RXNE flag is set in the SR
	if (PollingEn == enable)
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d106      	bne.n	8000a06 <MCAL_UART_ReceiveData+0x22>
	{
		while( ! (USARTx->SR & 1<<5 ));
 80009f8:	bf00      	nop
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f003 0320 	and.w	r3, r3, #32
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d0f9      	beq.n	80009fa <MCAL_UART_ReceiveData+0x16>
		}

	}else
	{
		//This is 8bit data
		if (Global_UART_Config->Parity ==UART_Parity__NONE)
 8000a06:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MCAL_UART_ReceiveData+0x54>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	7a5b      	ldrb	r3, [r3, #9]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d105      	bne.n	8000a1c <MCAL_UART_ReceiveData+0x38>
		{
			//no parity So all 8bit are considered data
			//*((uint8_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0xFF ) ;
			* pRxBuffer =  USARTx->DR & (uint8_t)0xFF ;
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	b2da      	uxtb	r2, r3
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	701a      	strb	r2, [r3, #0]

		}
	}


}
 8000a1a:	e007      	b.n	8000a2c <MCAL_UART_ReceiveData+0x48>
			*((uint8_t*) pRxBuffer) = ( USARTx->DR  & (uint8_t)0X7F );
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	b2db      	uxtb	r3, r3
 8000a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	68bb      	ldr	r3, [r7, #8]
 8000a2a:	701a      	strb	r2, [r3, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	3714      	adds	r7, #20
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bc80      	pop	{r7}
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000020 	.word	0x20000020

08000a3c <MCAL_UART_GPIO_Set_Pins>:
 * @param [in] 		- USARTx: where x can be (1..3 depending on device used)
 * @retval 			-none
 * Note				-Should enable the corresponding ALT  & GPIO  in RCC clock Also called after MCAL_UART_Init()
 */
void MCAL_UART_GPIO_Set_Pins (USART_TypeDef *USARTx)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
	GPIO_PinConfig_t pinCfg;
	if(USARTx == USART1 )
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a2b      	ldr	r2, [pc, #172]	; (8000af4 <MCAL_UART_GPIO_Set_Pins+0xb8>)
 8000a48:	4293      	cmp	r3, r2
 8000a4a:	d118      	bne.n	8000a7e <MCAL_UART_GPIO_Set_Pins+0x42>
		//PA10 RX
		//PA11 CTS
		//PA12 RTS

		//TX
		pinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000a4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a50:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a52:	2306      	movs	r3, #6
 8000a54:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000a56:	2301      	movs	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000a5a:	f107 030c 	add.w	r3, r7, #12
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4825      	ldr	r0, [pc, #148]	; (8000af8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a62:	f000 f8c2 	bl	8000bea <MCAL_GPIO_Init>
		//RX
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000a66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a6a:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000a6c:	2308      	movs	r3, #8
 8000a6e:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000a70:	f107 030c 	add.w	r3, r7, #12
 8000a74:	4619      	mov	r1, r3
 8000a76:	4820      	ldr	r0, [pc, #128]	; (8000af8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a78:	f000 f8b7 	bl	8000bea <MCAL_GPIO_Init>
			pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
			pinCfg.GPIO_Output_Speed =GPIO_SPEED_10M;
			MCAL_GPIO_Init(GPIOB, &pinCfg);
		}
	}
}
 8000a7c:	e036      	b.n	8000aec <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART2 )
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a1e      	ldr	r2, [pc, #120]	; (8000afc <MCAL_UART_GPIO_Set_Pins+0xc0>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d116      	bne.n	8000ab4 <MCAL_UART_GPIO_Set_Pins+0x78>
		pinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000a86:	2304      	movs	r3, #4
 8000a88:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4619      	mov	r1, r3
 8000a98:	4817      	ldr	r0, [pc, #92]	; (8000af8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000a9a:	f000 f8a6 	bl	8000bea <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000a9e:	2308      	movs	r3, #8
 8000aa0:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000aa2:	2308      	movs	r3, #8
 8000aa4:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOA, &pinCfg);
 8000aa6:	f107 030c 	add.w	r3, r7, #12
 8000aaa:	4619      	mov	r1, r3
 8000aac:	4812      	ldr	r0, [pc, #72]	; (8000af8 <MCAL_UART_GPIO_Set_Pins+0xbc>)
 8000aae:	f000 f89c 	bl	8000bea <MCAL_GPIO_Init>
}
 8000ab2:	e01b      	b.n	8000aec <MCAL_UART_GPIO_Set_Pins+0xb0>
	else if(USARTx == USART3 )
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	4a12      	ldr	r2, [pc, #72]	; (8000b00 <MCAL_UART_GPIO_Set_Pins+0xc4>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d117      	bne.n	8000aec <MCAL_UART_GPIO_Set_Pins+0xb0>
		pinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000abc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ac0:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_AF_PP;
 8000ac2:	2306      	movs	r3, #6
 8000ac4:	73bb      	strb	r3, [r7, #14]
		pinCfg.GPIO_Output_Speed=GPIO_SPEED_10M;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	73fb      	strb	r3, [r7, #15]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	4619      	mov	r1, r3
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000ad2:	f000 f88a 	bl	8000bea <MCAL_GPIO_Init>
		pinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000ad6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000ada:	81bb      	strh	r3, [r7, #12]
		pinCfg.GPIO_MODE = GPIO_MODE_AF_INPUT;
 8000adc:	2308      	movs	r3, #8
 8000ade:	73bb      	strb	r3, [r7, #14]
		MCAL_GPIO_Init(GPIOB, &pinCfg);
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <MCAL_UART_GPIO_Set_Pins+0xc8>)
 8000ae8:	f000 f87f 	bl	8000bea <MCAL_GPIO_Init>
}
 8000aec:	bf00      	nop
 8000aee:	3710      	adds	r7, #16
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40013800 	.word	0x40013800
 8000af8:	40010800 	.word	0x40010800
 8000afc:	40004400 	.word	0x40004400
 8000b00:	40004800 	.word	0x40004800
 8000b04:	40010c00 	.word	0x40010c00

08000b08 <USART1_IRQHandler>:



//ISR
void USART1_IRQHandler (void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
		Global_UART_Config->P_IRQ_CallBack () ;
 8000b0c:	4b02      	ldr	r3, [pc, #8]	; (8000b18 <USART1_IRQHandler+0x10>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	691b      	ldr	r3, [r3, #16]
 8000b12:	4798      	blx	r3
}
 8000b14:	bf00      	nop
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	20000020 	.word	0x20000020

08000b1c <USART2_IRQHandler>:

void USART2_IRQHandler (void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000b20:	4b02      	ldr	r3, [pc, #8]	; (8000b2c <USART2_IRQHandler+0x10>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	691b      	ldr	r3, [r3, #16]
 8000b26:	4798      	blx	r3

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000020 	.word	0x20000020

08000b30 <USART3_IRQHandler>:
void USART3_IRQHandler (void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
	Global_UART_Config->P_IRQ_CallBack () ;
 8000b34:	4b02      	ldr	r3, [pc, #8]	; (8000b40 <USART3_IRQHandler+0x10>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	691b      	ldr	r3, [r3, #16]
 8000b3a:	4798      	blx	r3


}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000020 	.word	0x20000020

08000b44 <Get_CRLH_Position>:


#include"stm32_f103c6_gpio_driver.h"

uint8_t Get_CRLH_Position (uint16_t PinNumber)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 8000b4e:	88fb      	ldrh	r3, [r7, #6]
 8000b50:	2b80      	cmp	r3, #128	; 0x80
 8000b52:	d042      	beq.n	8000bda <Get_CRLH_Position+0x96>
 8000b54:	2b80      	cmp	r3, #128	; 0x80
 8000b56:	dc11      	bgt.n	8000b7c <Get_CRLH_Position+0x38>
 8000b58:	2b08      	cmp	r3, #8
 8000b5a:	d036      	beq.n	8000bca <Get_CRLH_Position+0x86>
 8000b5c:	2b08      	cmp	r3, #8
 8000b5e:	dc06      	bgt.n	8000b6e <Get_CRLH_Position+0x2a>
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d02e      	beq.n	8000bc2 <Get_CRLH_Position+0x7e>
 8000b64:	2b04      	cmp	r3, #4
 8000b66:	d02e      	beq.n	8000bc6 <Get_CRLH_Position+0x82>
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	d028      	beq.n	8000bbe <Get_CRLH_Position+0x7a>
 8000b6c:	e037      	b.n	8000bde <Get_CRLH_Position+0x9a>
 8000b6e:	2b20      	cmp	r3, #32
 8000b70:	d02f      	beq.n	8000bd2 <Get_CRLH_Position+0x8e>
 8000b72:	2b40      	cmp	r3, #64	; 0x40
 8000b74:	d02f      	beq.n	8000bd6 <Get_CRLH_Position+0x92>
 8000b76:	2b10      	cmp	r3, #16
 8000b78:	d029      	beq.n	8000bce <Get_CRLH_Position+0x8a>
 8000b7a:	e030      	b.n	8000bde <Get_CRLH_Position+0x9a>
 8000b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b80:	d023      	beq.n	8000bca <Get_CRLH_Position+0x86>
 8000b82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000b86:	dc09      	bgt.n	8000b9c <Get_CRLH_Position+0x58>
 8000b88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000b8c:	d019      	beq.n	8000bc2 <Get_CRLH_Position+0x7e>
 8000b8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000b92:	d018      	beq.n	8000bc6 <Get_CRLH_Position+0x82>
 8000b94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000b98:	d011      	beq.n	8000bbe <Get_CRLH_Position+0x7a>
 8000b9a:	e020      	b.n	8000bde <Get_CRLH_Position+0x9a>
 8000b9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ba0:	d017      	beq.n	8000bd2 <Get_CRLH_Position+0x8e>
 8000ba2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ba6:	dc03      	bgt.n	8000bb0 <Get_CRLH_Position+0x6c>
 8000ba8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000bac:	d00f      	beq.n	8000bce <Get_CRLH_Position+0x8a>
 8000bae:	e016      	b.n	8000bde <Get_CRLH_Position+0x9a>
 8000bb0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bb4:	d00f      	beq.n	8000bd6 <Get_CRLH_Position+0x92>
 8000bb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000bba:	d00e      	beq.n	8000bda <Get_CRLH_Position+0x96>
 8000bbc:	e00f      	b.n	8000bde <Get_CRLH_Position+0x9a>
	{
	case GPIO_PIN_0:
	case GPIO_PIN_8:
		return 0; break;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	e00e      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_1:
	case GPIO_PIN_9:
		return 4; break;
 8000bc2:	2304      	movs	r3, #4
 8000bc4:	e00c      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_2:
	case GPIO_PIN_10:
		return 8; break;
 8000bc6:	2308      	movs	r3, #8
 8000bc8:	e00a      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_3:
	case GPIO_PIN_11:
		return 12; break;
 8000bca:	230c      	movs	r3, #12
 8000bcc:	e008      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_4:
	case GPIO_PIN_12:
		return 16; break;
 8000bce:	2310      	movs	r3, #16
 8000bd0:	e006      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_5:
	case GPIO_PIN_13:
		return 20; break;
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	e004      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_6:
	case GPIO_PIN_14:
		return 24; break;
 8000bd6:	2318      	movs	r3, #24
 8000bd8:	e002      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	case GPIO_PIN_7:
	case GPIO_PIN_15:
		return 28; break;
 8000bda:	231c      	movs	r3, #28
 8000bdc:	e000      	b.n	8000be0 <Get_CRLH_Position+0x9c>
	}
	return 0;
 8000bde:	2300      	movs	r3, #0
}
 8000be0:	4618      	mov	r0, r3
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr

08000bea <MCAL_GPIO_Init>:
 * Note              - stm32f103c6 MCU has GPIO A,B,C,D Modules
 *                     but LQFP48 package has only GPIO A,B,part of C,D exported as external PINS from the MCU
 */

void MCAL_GPIO_Init(GPIO_Typedef* GPIOx,GPIO_PinConfig_t* pinConfig)
{
 8000bea:	b590      	push	{r4, r7, lr}
 8000bec:	b085      	sub	sp, #20
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
 8000bf2:	6039      	str	r1, [r7, #0]

	// Port configuration register low (GPIOx_CRL) configure pin from  0 >> 7
	// Port configuration register high (GPIOx_CRH) configure pin from  8 >> 15
	volatile uint32_t* configregister = NULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
	uint8_t PIN_Config = 0;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	73fb      	strb	r3, [r7, #15]
	configregister =(pinConfig->GPIO_PinNumber < GPIO_PIN_8)? &GPIOx->CRL : &GPIOx->CRH ;
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	2bff      	cmp	r3, #255	; 0xff
 8000c02:	d801      	bhi.n	8000c08 <MCAL_GPIO_Init+0x1e>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	e001      	b.n	8000c0c <MCAL_GPIO_Init+0x22>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	3304      	adds	r3, #4
 8000c0c:	60bb      	str	r3, [r7, #8]
	// clear CNF0[1:0] MODE0[1:0]
	(*configregister) &=~( 0xf<< Get_CRLH_Position(pinConfig->GPIO_PinNumber));
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	881b      	ldrh	r3, [r3, #0]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff96 	bl	8000b44 <Get_CRLH_Position>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	230f      	movs	r3, #15
 8000c1e:	4093      	lsls	r3, r2
 8000c20:	43da      	mvns	r2, r3
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	401a      	ands	r2, r3
 8000c28:	68bb      	ldr	r3, [r7, #8]
 8000c2a:	601a      	str	r2, [r3, #0]

	// if pin is output
	if(pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_OD || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || pinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP )
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	789b      	ldrb	r3, [r3, #2]
 8000c30:	2b07      	cmp	r3, #7
 8000c32:	d00b      	beq.n	8000c4c <MCAL_GPIO_Init+0x62>
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	789b      	ldrb	r3, [r3, #2]
 8000c38:	2b06      	cmp	r3, #6
 8000c3a:	d007      	beq.n	8000c4c <MCAL_GPIO_Init+0x62>
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	789b      	ldrb	r3, [r3, #2]
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	d003      	beq.n	8000c4c <MCAL_GPIO_Init+0x62>
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	789b      	ldrb	r3, [r3, #2]
 8000c48:	2b04      	cmp	r3, #4
 8000c4a:	d10e      	bne.n	8000c6a <MCAL_GPIO_Init+0x80>
	{
		PIN_Config =( (((pinConfig->GPIO_MODE - 4)<< 2) | (pinConfig->GPIO_Output_Speed))& 0x0f );
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	789b      	ldrb	r3, [r3, #2]
 8000c50:	3b04      	subs	r3, #4
 8000c52:	009b      	lsls	r3, r3, #2
 8000c54:	b25a      	sxtb	r2, r3
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	78db      	ldrb	r3, [r3, #3]
 8000c5a:	b25b      	sxtb	r3, r3
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	b25b      	sxtb	r3, r3
 8000c60:	b2db      	uxtb	r3, r3
 8000c62:	f003 030f 	and.w	r3, r3, #15
 8000c66:	73fb      	strb	r3, [r7, #15]
 8000c68:	e02c      	b.n	8000cc4 <MCAL_GPIO_Init+0xda>
	}
	// if pin is input
	else
	{
		if(pinConfig->GPIO_MODE == GPIO_MODE_ANALOG || pinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO  )
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	789b      	ldrb	r3, [r3, #2]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d003      	beq.n	8000c7a <MCAL_GPIO_Init+0x90>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	789b      	ldrb	r3, [r3, #2]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d107      	bne.n	8000c8a <MCAL_GPIO_Init+0xa0>
		{
			PIN_Config =( (((pinConfig->GPIO_MODE )<< 2) | 0x0 )& 0x0f );
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	789b      	ldrb	r3, [r3, #2]
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 030f 	and.w	r3, r3, #15
 8000c86:	73fb      	strb	r3, [r7, #15]
 8000c88:	e01c      	b.n	8000cc4 <MCAL_GPIO_Init+0xda>
		}
		else if(pinConfig->GPIO_MODE == GPIO_MODE_AF_INPUT) // consider it as input floating
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	789b      	ldrb	r3, [r3, #2]
 8000c8e:	2b08      	cmp	r3, #8
 8000c90:	d102      	bne.n	8000c98 <MCAL_GPIO_Init+0xae>
		{
			PIN_Config =( (((GPIO_MODE_INPUT_FLO )<< 2) | 0x0 )& 0x0f );
 8000c92:	2304      	movs	r3, #4
 8000c94:	73fb      	strb	r3, [r7, #15]
 8000c96:	e015      	b.n	8000cc4 <MCAL_GPIO_Init+0xda>
		}
		else
		{
			PIN_Config =( (((GPIO_MODE_INPUT_PU )<< 2) | 0x0 )& 0x0f );
 8000c98:	2308      	movs	r3, #8
 8000c9a:	73fb      	strb	r3, [r7, #15]
			if(pinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	789b      	ldrb	r3, [r3, #2]
 8000ca0:	2b02      	cmp	r3, #2
 8000ca2:	d107      	bne.n	8000cb4 <MCAL_GPIO_Init+0xca>
			{
				// Table 20. port bit configuration table PxODR 1
				GPIOx->ODR |= pinConfig->GPIO_PinNumber ;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	8812      	ldrh	r2, [r2, #0]
 8000cac:	431a      	orrs	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	e007      	b.n	8000cc4 <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// Table 20. port bit configuration table PxODR 0
				GPIOx->ODR &=~( pinConfig->GPIO_PinNumber) ;
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	8812      	ldrh	r2, [r2, #0]
 8000cbc:	43d2      	mvns	r2, r2
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	60da      	str	r2, [r3, #12]
			}
		}
	}
	// write on the CRL OR CRH
	(*configregister) |= ((PIN_Config)<< Get_CRLH_Position(pinConfig->GPIO_PinNumber));
 8000cc4:	7bfc      	ldrb	r4, [r7, #15]
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f7ff ff3a 	bl	8000b44 <Get_CRLH_Position>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	fa04 f203 	lsl.w	r2, r4, r3
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	431a      	orrs	r2, r3
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	601a      	str	r2, [r3, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	3714      	adds	r7, #20
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd90      	pop	{r4, r7, pc}

08000ce8 <MCAL_GPIO_WritePin>:
 * @param  [in]      - value : set pin value according to  @ref GPIO_PINS_define
 * @retval           - none
 * Note              - none
 */
void MCAL_GPIO_WritePin ( GPIO_Typedef* GPIOx, uint16_t PinNumber, uint8_t value)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	460b      	mov	r3, r1
 8000cf2:	807b      	strh	r3, [r7, #2]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	707b      	strb	r3, [r7, #1]
	if( value != GPIO_PIN_RESET )
 8000cf8:	787b      	ldrb	r3, [r7, #1]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <MCAL_GPIO_WritePin+0x1e>
	{
		// GPIOx->ODR |= PinNumber;
		// or
		GPIOx->BSRR =PinNumber;
 8000cfe:	887a      	ldrh	r2, [r7, #2]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	611a      	str	r2, [r3, #16]
	else
	{
		GPIOx->BRR = PinNumber ;
	}

}
 8000d04:	e002      	b.n	8000d0c <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = PinNumber ;
 8000d06:	887a      	ldrh	r2, [r7, #2]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	615a      	str	r2, [r3, #20]
}
 8000d0c:	bf00      	nop
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bc80      	pop	{r7}
 8000d14:	4770      	bx	lr

08000d16 <MCAL_GPIO_WritePort>:
 * @param  [in]      - value : set port value
 * @retval           - none
 * Note              - none
 */
void MCAL_GPIO_WritePort( GPIO_Typedef* GPIOx, uint8_t value)
{
 8000d16:	b480      	push	{r7}
 8000d18:	b083      	sub	sp, #12
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	6078      	str	r0, [r7, #4]
 8000d1e:	460b      	mov	r3, r1
 8000d20:	70fb      	strb	r3, [r7, #3]
	GPIOx->ODR =(uint32_t)value;
 8000d22:	78fa      	ldrb	r2, [r7, #3]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	60da      	str	r2, [r3, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bc80      	pop	{r7}
 8000d30:	4770      	bx	lr

08000d32 <MCAL_GPIO_TogglePin>:
 * @param  [in]      - PinNumber: set pin number according to  @ref GPIO_PINS_define
 * @retval           - none
 * Note              - none
 */
void MCAL_GPIO_TogglePin ( GPIO_Typedef* GPIOx, uint16_t PinNumber )
{
 8000d32:	b480      	push	{r7}
 8000d34:	b083      	sub	sp, #12
 8000d36:	af00      	add	r7, sp, #0
 8000d38:	6078      	str	r0, [r7, #4]
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR ^= (PinNumber);
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	68da      	ldr	r2, [r3, #12]
 8000d42:	887b      	ldrh	r3, [r7, #2]
 8000d44:	405a      	eors	r2, r3
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	60da      	str	r2, [r3, #12]
}
 8000d4a:	bf00      	nop
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bc80      	pop	{r7}
 8000d52:	4770      	bx	lr

08000d54 <__libc_init_array>:
 8000d54:	b570      	push	{r4, r5, r6, lr}
 8000d56:	2500      	movs	r5, #0
 8000d58:	4e0c      	ldr	r6, [pc, #48]	; (8000d8c <__libc_init_array+0x38>)
 8000d5a:	4c0d      	ldr	r4, [pc, #52]	; (8000d90 <__libc_init_array+0x3c>)
 8000d5c:	1ba4      	subs	r4, r4, r6
 8000d5e:	10a4      	asrs	r4, r4, #2
 8000d60:	42a5      	cmp	r5, r4
 8000d62:	d109      	bne.n	8000d78 <__libc_init_array+0x24>
 8000d64:	f000 f81a 	bl	8000d9c <_init>
 8000d68:	2500      	movs	r5, #0
 8000d6a:	4e0a      	ldr	r6, [pc, #40]	; (8000d94 <__libc_init_array+0x40>)
 8000d6c:	4c0a      	ldr	r4, [pc, #40]	; (8000d98 <__libc_init_array+0x44>)
 8000d6e:	1ba4      	subs	r4, r4, r6
 8000d70:	10a4      	asrs	r4, r4, #2
 8000d72:	42a5      	cmp	r5, r4
 8000d74:	d105      	bne.n	8000d82 <__libc_init_array+0x2e>
 8000d76:	bd70      	pop	{r4, r5, r6, pc}
 8000d78:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d7c:	4798      	blx	r3
 8000d7e:	3501      	adds	r5, #1
 8000d80:	e7ee      	b.n	8000d60 <__libc_init_array+0xc>
 8000d82:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000d86:	4798      	blx	r3
 8000d88:	3501      	adds	r5, #1
 8000d8a:	e7f2      	b.n	8000d72 <__libc_init_array+0x1e>
 8000d8c:	08000dcc 	.word	0x08000dcc
 8000d90:	08000dcc 	.word	0x08000dcc
 8000d94:	08000dcc 	.word	0x08000dcc
 8000d98:	08000dd0 	.word	0x08000dd0

08000d9c <_init>:
 8000d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d9e:	bf00      	nop
 8000da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000da2:	bc08      	pop	{r3}
 8000da4:	469e      	mov	lr, r3
 8000da6:	4770      	bx	lr

08000da8 <_fini>:
 8000da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000daa:	bf00      	nop
 8000dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000dae:	bc08      	pop	{r3}
 8000db0:	469e      	mov	lr, r3
 8000db2:	4770      	bx	lr
